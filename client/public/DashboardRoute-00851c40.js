
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { e as element, t as text, G as set_style, H as CSSUtility, a as attr_dev, b as add_location, i as insert_dev, d as append_dev, a6 as set_data_dev, h as detach_dev, k as dispatch_dev, A as create_slot, s as space, B as update_slot, f as transition_in, g as transition_out, q as assign, Q as Button, c as create_component, m as mount_component, w as get_spread_update, x as get_spread_object, j as destroy_component, J as compute_rest_props, n as noop, K as subscribe, v as validate_slots, ad as compute_slots, M as writable, N as validate_store, W as createEventDispatcher, _ as set_store_value, O as exclude_internal_props, l as SvelteComponentDev, o as init, p as safe_not_equal, P as flush, $ as globals, T as toggle_class, u as empty, ae as Logo, af as validate_each_argument, y as group_outros, z as check_outros, ag as destroy_each, F as Fragment, a5 as RandomUtility, U as listen_dev } from './index-4ccfc512.js';
import { C as Card } from './Card-1a4e3476.js';

var undefined$4 = undefined;

/* src\ui\blocks\buttons\FillOrTwoToneButton.svelte generated by Svelte v3.38.2 */
const file$3 = "src\\ui\\blocks\\buttons\\FillOrTwoToneButton.svelte";

// (53:2) {:else}
function create_else_block(ctx) {
	let iconf;
	let t;

	const block = {
		c: function create() {
			iconf = element("iconf");
			t = text(/*$iconW*/ ctx[9]);
			set_style(iconf, "--colour-fill", CSSUtility.parse(/*currentFillColour*/ ctx[6]));
			set_style(iconf, "--icon-size", CSSUtility.parse(/*iconSize*/ ctx[2]));
			attr_dev(iconf, "class", "svelte-1v0uafi");
			add_location(iconf, file$3, 53, 3, 1662);
		},
		m: function mount(target, anchor) {
			insert_dev(target, iconf, anchor);
			append_dev(iconf, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$iconW*/ 512) set_data_dev(t, /*$iconW*/ ctx[9]);

			if (dirty & /*currentFillColour*/ 64) {
				set_style(iconf, "--colour-fill", CSSUtility.parse(/*currentFillColour*/ ctx[6]));
			}

			if (dirty & /*iconSize*/ 4) {
				set_style(iconf, "--icon-size", CSSUtility.parse(/*iconSize*/ ctx[2]));
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(iconf);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(53:2) {:else}",
		ctx
	});

	return block;
}

// (44:2) {#if $isTwoToneW}
function create_if_block$2(ctx) {
	let icon_1;
	let t;

	const block = {
		c: function create() {
			icon_1 = element("icon");
			t = text(/*$iconW*/ ctx[9]);
			set_style(icon_1, "--filter-twotone", CSSUtility.parse(/*currentTwoToneFilter*/ ctx[7]));
			set_style(icon_1, "--icon-size", CSSUtility.parse(/*iconSize*/ ctx[2]));
			attr_dev(icon_1, "class", "svelte-1v0uafi");
			add_location(icon_1, file$3, 44, 3, 1474);
		},
		m: function mount(target, anchor) {
			insert_dev(target, icon_1, anchor);
			append_dev(icon_1, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$iconW*/ 512) set_data_dev(t, /*$iconW*/ ctx[9]);

			if (dirty & /*currentTwoToneFilter*/ 128) {
				set_style(icon_1, "--filter-twotone", CSSUtility.parse(/*currentTwoToneFilter*/ ctx[7]));
			}

			if (dirty & /*iconSize*/ 4) {
				set_style(icon_1, "--icon-size", CSSUtility.parse(/*iconSize*/ ctx[2]));
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(icon_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(44:2) {#if $isTwoToneW}",
		ctx
	});

	return block;
}

// (31:0) <Button   on:click={() => dispatch('click')}   on:mouseover={() => (($isHoveredW = true), dispatch('mouseover'))}   on:mouseout={() => (($isHoveredW = false),  dispatch('mouseout'))}   hoverColour={backgroundHoverColour}   {...$$restProps}   isText={false}  >
function create_default_slot$3(ctx) {
	let container;
	let t;
	let current;

	function select_block_type(ctx, dirty) {
		if (/*$isTwoToneW*/ ctx[8]) return create_if_block$2;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);
	const default_slot_template = /*#slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[23], null);

	const block = {
		c: function create() {
			container = element("container");
			if_block.c();
			t = space();
			if (default_slot) default_slot.c();

			set_style(container, "--icon-width", /*$$slots*/ ctx[12].default
			? "calc(var(--icon-size) * 2.5)"
			: "auto");

			attr_dev(container, "class", "svelte-1v0uafi");
			add_location(container, file$3, 38, 1, 1338);
		},
		m: function mount(target, anchor) {
			insert_dev(target, container, anchor);
			if_block.m(container, null);
			append_dev(container, t);

			if (default_slot) {
				default_slot.m(container, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(container, t);
				}
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8388608)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[23], dirty, null, null);
				}
			}

			if (!current || dirty & /*$$slots*/ 4096) {
				set_style(container, "--icon-width", /*$$slots*/ ctx[12].default
				? "calc(var(--icon-size) * 2.5)"
				: "auto");
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(container);
			if_block.d();
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$3.name,
		type: "slot",
		source: "(31:0) <Button   on:click={() => dispatch('click')}   on:mouseover={() => (($isHoveredW = true), dispatch('mouseover'))}   on:mouseout={() => (($isHoveredW = false),  dispatch('mouseout'))}   hoverColour={backgroundHoverColour}   {...$$restProps}   isText={false}  >",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let button;
	let current;

	const button_spread_levels = [
		{
			hoverColour: /*backgroundHoverColour*/ ctx[3]
		},
		/*$$restProps*/ ctx[11],
		{ isText: false }
	];

	let button_props = {
		$$slots: { default: [create_default_slot$3] },
		$$scope: { ctx }
	};

	for (let i = 0; i < button_spread_levels.length; i += 1) {
		button_props = assign(button_props, button_spread_levels[i]);
	}

	button = new Button({ props: button_props, $$inline: true });
	button.$on("click", /*click_handler*/ ctx[20]);
	button.$on("mouseover", /*mouseover_handler*/ ctx[21]);
	button.$on("mouseout", /*mouseout_handler*/ ctx[22]);

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const button_changes = (dirty & /*backgroundHoverColour, $$restProps*/ 2056)
			? get_spread_update(button_spread_levels, [
					dirty & /*backgroundHoverColour*/ 8 && {
						hoverColour: /*backgroundHoverColour*/ ctx[3]
					},
					dirty & /*$$restProps*/ 2048 && get_spread_object(/*$$restProps*/ ctx[11]),
					button_spread_levels[2]
				])
			: {};

			if (dirty & /*$$scope, $$slots, currentTwoToneFilter, iconSize, $iconW, $isTwoToneW, currentFillColour*/ 8393668) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"isTwoTone","isTwoToneW","icon","iconW","iconSize","twoToneFilter","fillColour","hoverFillColour","hoverTwoToneFilter","backgroundHoverColour","isHoveredW"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);

	let $isHoveredW,
		$$unsubscribe_isHoveredW = noop,
		$$subscribe_isHoveredW = () => ($$unsubscribe_isHoveredW(), $$unsubscribe_isHoveredW = subscribe(isHoveredW, $$value => $$invalidate(5, $isHoveredW = $$value)), isHoveredW);

	let $isTwoToneW,
		$$unsubscribe_isTwoToneW = noop,
		$$subscribe_isTwoToneW = () => ($$unsubscribe_isTwoToneW(), $$unsubscribe_isTwoToneW = subscribe(isTwoToneW, $$value => $$invalidate(8, $isTwoToneW = $$value)), isTwoToneW);

	let $iconW,
		$$unsubscribe_iconW = noop,
		$$subscribe_iconW = () => ($$unsubscribe_iconW(), $$unsubscribe_iconW = subscribe(iconW, $$value => $$invalidate(9, $iconW = $$value)), iconW);

	$$self.$$.on_destroy.push(() => $$unsubscribe_isHoveredW());
	$$self.$$.on_destroy.push(() => $$unsubscribe_isTwoToneW());
	$$self.$$.on_destroy.push(() => $$unsubscribe_iconW());
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("FillOrTwoToneButton", slots, ['default']);
	const $$slots = compute_slots(slots);
	
	let { isTwoTone = true } = $$props;
	let { isTwoToneW = writable(isTwoTone) } = $$props;
	validate_store(isTwoToneW, "isTwoToneW");
	$$subscribe_isTwoToneW();
	let { icon = "done" } = $$props;
	let { iconW = writable(icon) } = $$props;
	validate_store(iconW, "iconW");
	$$subscribe_iconW();
	let { iconSize = "1rem" } = $$props;
	let { twoToneFilter = "--filter-text-secondary" } = $$props;
	let { fillColour = "--colour-text-secondary" } = $$props;
	let { hoverFillColour = "--colour-accent-primary" } = $$props;
	let { hoverTwoToneFilter = "--filter-accent-primary" } = $$props;
	let { backgroundHoverColour = "--colour-accent-secondary" } = $$props;
	let { isHoveredW = writable(false) } = $$props;
	validate_store(isHoveredW, "isHoveredW");
	$$subscribe_isHoveredW();
	const dispatch = createEventDispatcher();
	let currentFillColour;
	let currentTwoToneFilter;
	const click_handler = () => dispatch("click");
	const mouseover_handler = () => (set_store_value(isHoveredW, $isHoveredW = true, $isHoveredW), dispatch("mouseover"));
	const mouseout_handler = () => (set_store_value(isHoveredW, $isHoveredW = false, $isHoveredW), dispatch("mouseout"));

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("isTwoTone" in $$new_props) $$invalidate(13, isTwoTone = $$new_props.isTwoTone);
		if ("isTwoToneW" in $$new_props) $$subscribe_isTwoToneW($$invalidate(0, isTwoToneW = $$new_props.isTwoToneW));
		if ("icon" in $$new_props) $$invalidate(14, icon = $$new_props.icon);
		if ("iconW" in $$new_props) $$subscribe_iconW($$invalidate(1, iconW = $$new_props.iconW));
		if ("iconSize" in $$new_props) $$invalidate(2, iconSize = $$new_props.iconSize);
		if ("twoToneFilter" in $$new_props) $$invalidate(15, twoToneFilter = $$new_props.twoToneFilter);
		if ("fillColour" in $$new_props) $$invalidate(16, fillColour = $$new_props.fillColour);
		if ("hoverFillColour" in $$new_props) $$invalidate(17, hoverFillColour = $$new_props.hoverFillColour);
		if ("hoverTwoToneFilter" in $$new_props) $$invalidate(18, hoverTwoToneFilter = $$new_props.hoverTwoToneFilter);
		if ("backgroundHoverColour" in $$new_props) $$invalidate(3, backgroundHoverColour = $$new_props.backgroundHoverColour);
		if ("isHoveredW" in $$new_props) $$subscribe_isHoveredW($$invalidate(4, isHoveredW = $$new_props.isHoveredW));
		if ("$$scope" in $$new_props) $$invalidate(23, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		writable,
		CSSUtility,
		Button,
		isTwoTone,
		isTwoToneW,
		icon,
		iconW,
		iconSize,
		twoToneFilter,
		fillColour,
		hoverFillColour,
		hoverTwoToneFilter,
		backgroundHoverColour,
		isHoveredW,
		dispatch,
		currentFillColour,
		currentTwoToneFilter,
		$isHoveredW,
		$isTwoToneW,
		$iconW
	});

	$$self.$inject_state = $$new_props => {
		if ("isTwoTone" in $$props) $$invalidate(13, isTwoTone = $$new_props.isTwoTone);
		if ("isTwoToneW" in $$props) $$subscribe_isTwoToneW($$invalidate(0, isTwoToneW = $$new_props.isTwoToneW));
		if ("icon" in $$props) $$invalidate(14, icon = $$new_props.icon);
		if ("iconW" in $$props) $$subscribe_iconW($$invalidate(1, iconW = $$new_props.iconW));
		if ("iconSize" in $$props) $$invalidate(2, iconSize = $$new_props.iconSize);
		if ("twoToneFilter" in $$props) $$invalidate(15, twoToneFilter = $$new_props.twoToneFilter);
		if ("fillColour" in $$props) $$invalidate(16, fillColour = $$new_props.fillColour);
		if ("hoverFillColour" in $$props) $$invalidate(17, hoverFillColour = $$new_props.hoverFillColour);
		if ("hoverTwoToneFilter" in $$props) $$invalidate(18, hoverTwoToneFilter = $$new_props.hoverTwoToneFilter);
		if ("backgroundHoverColour" in $$props) $$invalidate(3, backgroundHoverColour = $$new_props.backgroundHoverColour);
		if ("isHoveredW" in $$props) $$subscribe_isHoveredW($$invalidate(4, isHoveredW = $$new_props.isHoveredW));
		if ("currentFillColour" in $$props) $$invalidate(6, currentFillColour = $$new_props.currentFillColour);
		if ("currentTwoToneFilter" in $$props) $$invalidate(7, currentTwoToneFilter = $$new_props.currentTwoToneFilter);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$isHoveredW, hoverFillColour, hoverTwoToneFilter, fillColour, twoToneFilter*/ 491552) {
			$: $isHoveredW
			? (() => {
					$$invalidate(6, currentFillColour = hoverFillColour);
					$$invalidate(7, currentTwoToneFilter = hoverTwoToneFilter);
				})()
			: (() => {
					$$invalidate(6, currentFillColour = fillColour);
					$$invalidate(7, currentTwoToneFilter = twoToneFilter);
				})();
		}
	};

	return [
		isTwoToneW,
		iconW,
		iconSize,
		backgroundHoverColour,
		isHoveredW,
		$isHoveredW,
		currentFillColour,
		currentTwoToneFilter,
		$isTwoToneW,
		$iconW,
		dispatch,
		$$restProps,
		$$slots,
		isTwoTone,
		icon,
		twoToneFilter,
		fillColour,
		hoverFillColour,
		hoverTwoToneFilter,
		slots,
		click_handler,
		mouseover_handler,
		mouseout_handler,
		$$scope
	];
}

class FillOrTwoToneButton extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			isTwoTone: 13,
			isTwoToneW: 0,
			icon: 14,
			iconW: 1,
			iconSize: 2,
			twoToneFilter: 15,
			fillColour: 16,
			hoverFillColour: 17,
			hoverTwoToneFilter: 18,
			backgroundHoverColour: 3,
			isHoveredW: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FillOrTwoToneButton",
			options,
			id: create_fragment$3.name
		});
	}

	get isTwoTone() {
		return this.$$.ctx[13];
	}

	set isTwoTone(isTwoTone) {
		this.$set({ isTwoTone });
		flush();
	}

	get isTwoToneW() {
		return this.$$.ctx[0];
	}

	set isTwoToneW(isTwoToneW) {
		this.$set({ isTwoToneW });
		flush();
	}

	get icon() {
		return this.$$.ctx[14];
	}

	set icon(icon) {
		this.$set({ icon });
		flush();
	}

	get iconW() {
		return this.$$.ctx[1];
	}

	set iconW(iconW) {
		this.$set({ iconW });
		flush();
	}

	get iconSize() {
		return this.$$.ctx[2];
	}

	set iconSize(iconSize) {
		this.$set({ iconSize });
		flush();
	}

	get twoToneFilter() {
		return this.$$.ctx[15];
	}

	set twoToneFilter(twoToneFilter) {
		this.$set({ twoToneFilter });
		flush();
	}

	get fillColour() {
		return this.$$.ctx[16];
	}

	set fillColour(fillColour) {
		this.$set({ fillColour });
		flush();
	}

	get hoverFillColour() {
		return this.$$.ctx[17];
	}

	set hoverFillColour(hoverFillColour) {
		this.$set({ hoverFillColour });
		flush();
	}

	get hoverTwoToneFilter() {
		return this.$$.ctx[18];
	}

	set hoverTwoToneFilter(hoverTwoToneFilter) {
		this.$set({ hoverTwoToneFilter });
		flush();
	}

	get backgroundHoverColour() {
		return this.$$.ctx[3];
	}

	set backgroundHoverColour(backgroundHoverColour) {
		this.$set({ backgroundHoverColour });
		flush();
	}

	get isHoveredW() {
		return this.$$.ctx[4];
	}

	set isHoveredW(isHoveredW) {
		this.$set({ isHoveredW });
		flush();
	}
}

var undefined$3 = undefined;

/* src\ui\components\Sidebar.svelte generated by Svelte v3.38.2 */

const { Object: Object_1 } = globals;
const file$2 = "src\\ui\\components\\Sidebar.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i][0];
	child_ctx[6] = list[i][1];
	child_ctx[8] = i;
	return child_ctx;
}

// (55:4) {#if $isTitlesEnabledW}
function create_if_block$1(ctx) {
	let heading;
	let t_value = /*title*/ ctx[6] + "";
	let t;

	const block = {
		c: function create() {
			heading = element("heading");
			t = text(t_value);
			attr_dev(heading, "class", "svelte-1uksazz");
			toggle_class(heading, "active", /*i*/ ctx[8] === activeIndex);
			add_location(heading, file$2, 55, 5, 1407);
		},
		m: function mount(target, anchor) {
			insert_dev(target, heading, anchor);
			append_dev(heading, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(heading);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(55:4) {#if $isTitlesEnabledW}",
		ctx
	});

	return block;
}

// (48:3) <FillOrTwoToneButton      backgroundColour='transparent'      {icon}      isTwoTone={i !== activeIndex}      fillColour={i === activeIndex ? '--colour-accent-primary' : '--colour-text-secondary'}      iconSize='1.4rem'     >
function create_default_slot_1$1(ctx) {
	let if_block_anchor;
	let if_block = /*$isTitlesEnabledW*/ ctx[1] && create_if_block$1(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*$isTitlesEnabledW*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$1.name,
		type: "slot",
		source: "(48:3) <FillOrTwoToneButton      backgroundColour='transparent'      {icon}      isTwoTone={i !== activeIndex}      fillColour={i === activeIndex ? '--colour-accent-primary' : '--colour-text-secondary'}      iconSize='1.4rem'     >",
		ctx
	});

	return block;
}

// (44:1) {#each IconAndTitleEntries as [icon, title], i}
function create_each_block(ctx) {
	let container;
	let fillortwotonebutton;
	let t;
	let current;

	fillortwotonebutton = new FillOrTwoToneButton({
			props: {
				backgroundColour: "transparent",
				icon: /*icon*/ ctx[5],
				isTwoTone: /*i*/ ctx[8] !== activeIndex,
				fillColour: /*i*/ ctx[8] === activeIndex
				? "--colour-accent-primary"
				: "--colour-text-secondary",
				iconSize: "1.4rem",
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			container = element("container");
			create_component(fillortwotonebutton.$$.fragment);
			t = space();
			attr_dev(container, "class", "button svelte-1uksazz");
			add_location(container, file$2, 44, 2, 1108);
		},
		m: function mount(target, anchor) {
			insert_dev(target, container, anchor);
			mount_component(fillortwotonebutton, container, null);
			append_dev(container, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			const fillortwotonebutton_changes = {};

			if (dirty & /*$$scope, $isTitlesEnabledW*/ 514) {
				fillortwotonebutton_changes.$$scope = { dirty, ctx };
			}

			fillortwotonebutton.$set(fillortwotonebutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(fillortwotonebutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(fillortwotonebutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(container);
			destroy_component(fillortwotonebutton);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(44:1) {#each IconAndTitleEntries as [icon, title], i}",
		ctx
	});

	return block;
}

// (22:0) <Fragment   isPadded={true}   isInAnimated={true}   isOutAnimated={true}   padding='calc(var(--padding) / 2)'   height='100vh'   width='100%'   justify='flex-start'   rows={`repeat(${    // + logo    IconAndTitleEntries.length + 1   }, 56px)`}  >
function create_default_slot$2(ctx) {
	let container;
	let logo;
	let t;
	let each_1_anchor;
	let current;

	logo = new Logo({
			props: {
				colour: "--colour-text-primary",
				height: "auto",
				width: "auto"
			},
			$$inline: true
		});

	let each_value = /*IconAndTitleEntries*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			container = element("container");
			create_component(logo.$$.fragment);
			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			attr_dev(container, "class", "logo svelte-1uksazz");
			add_location(container, file$2, 34, 1, 924);
		},
		m: function mount(target, anchor) {
			insert_dev(target, container, anchor);
			mount_component(logo, container, null);
			insert_dev(target, t, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*IconAndTitleEntries, activeIndex, $isTitlesEnabledW*/ 6) {
				each_value = /*IconAndTitleEntries*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(logo.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(logo.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(container);
			destroy_component(logo);
			if (detaching) detach_dev(t);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(22:0) <Fragment   isPadded={true}   isInAnimated={true}   isOutAnimated={true}   padding='calc(var(--padding) / 2)'   height='100vh'   width='100%'   justify='flex-start'   rows={`repeat(${    // + logo    IconAndTitleEntries.length + 1   }, 56px)`}  >",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let fragment;
	let current;

	fragment = new Fragment({
			props: {
				isPadded: true,
				isInAnimated: true,
				isOutAnimated: true,
				padding: "calc(var(--padding) / 2)",
				height: "100vh",
				width: "100%",
				justify: "flex-start",
				rows: `repeat(${// + logo
				/*IconAndTitleEntries*/ ctx[2].length + 1}, 56px)`,
				$$slots: { default: [create_default_slot$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(fragment.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(fragment, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const fragment_changes = {};

			if (dirty & /*$$scope, $isTitlesEnabledW*/ 514) {
				fragment_changes.$$scope = { dirty, ctx };
			}

			fragment.$set(fragment_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(fragment.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(fragment.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(fragment, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const activeIndex = 0;

function instance$2($$self, $$props, $$invalidate) {
	let $isTitlesEnabledW,
		$$unsubscribe_isTitlesEnabledW = noop,
		$$subscribe_isTitlesEnabledW = () => ($$unsubscribe_isTitlesEnabledW(), $$unsubscribe_isTitlesEnabledW = subscribe(isTitlesEnabledW, $$value => $$invalidate(1, $isTitlesEnabledW = $$value)), isTitlesEnabledW);

	$$self.$$.on_destroy.push(() => $$unsubscribe_isTitlesEnabledW());
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Sidebar", slots, []);
	
	let { isTitlesEnabled = true } = $$props;
	let { isTitlesEnabledW = writable(isTitlesEnabled) } = $$props;
	validate_store(isTitlesEnabledW, "isTitlesEnabledW");
	$$subscribe_isTitlesEnabledW();

	const IconAndTitleMap = {
		cottage: "Home",
		tag: "These",
		notifications: "Aren't",
		mail: "Actually",
		bookmark: "Functional",
		subject: "They're",
		account_circle: "Purely",
		more_vert: "Distractions"
	};

	const IconAndTitleEntries = Object.entries(IconAndTitleMap);
	const writable_props = ["isTitlesEnabled", "isTitlesEnabledW"];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Sidebar> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("isTitlesEnabled" in $$props) $$invalidate(3, isTitlesEnabled = $$props.isTitlesEnabled);
		if ("isTitlesEnabledW" in $$props) $$subscribe_isTitlesEnabledW($$invalidate(0, isTitlesEnabledW = $$props.isTitlesEnabledW));
	};

	$$self.$capture_state = () => ({
		writable,
		FillOrTwoToneButton,
		Fragment,
		Logo,
		isTitlesEnabled,
		isTitlesEnabledW,
		IconAndTitleMap,
		IconAndTitleEntries,
		activeIndex,
		$isTitlesEnabledW
	});

	$$self.$inject_state = $$props => {
		if ("isTitlesEnabled" in $$props) $$invalidate(3, isTitlesEnabled = $$props.isTitlesEnabled);
		if ("isTitlesEnabledW" in $$props) $$subscribe_isTitlesEnabledW($$invalidate(0, isTitlesEnabledW = $$props.isTitlesEnabledW));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [isTitlesEnabledW, $isTitlesEnabledW, IconAndTitleEntries, isTitlesEnabled];
}

class Sidebar extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { isTitlesEnabled: 3, isTitlesEnabledW: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Sidebar",
			options,
			id: create_fragment$2.name
		});
	}

	get isTitlesEnabled() {
		return this.$$.ctx[3];
	}

	set isTitlesEnabled(isTitlesEnabled) {
		this.$set({ isTitlesEnabled });
		flush();
	}

	get isTitlesEnabledW() {
		return this.$$.ctx[0];
	}

	set isTitlesEnabledW(isTitlesEnabledW) {
		this.$set({ isTitlesEnabledW });
		flush();
	}
}

var undefined$2 = undefined;

/* src\ui\components\Tweet.svelte generated by Svelte v3.38.2 */
const file$1 = "src\\ui\\components\\Tweet.svelte";
const get_rich_slot_changes = dirty => ({});
const get_rich_slot_context = ctx => ({});

// (61:3) {#if $$slots.rich}
function create_if_block(ctx) {
	let card;
	let current;

	card = new Card({
			props: {
				width: "100%",
				height: "200px",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(card.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const card_changes = {};

			if (dirty & /*$$scope*/ 128) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(card, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(61:3) {#if $$slots.rich}",
		ctx
	});

	return block;
}

// (62:4) <Card       width='100%'       height='200px'      >
function create_default_slot_4(ctx) {
	let current;
	const rich_slot_template = /*#slots*/ ctx[5].rich;
	const rich_slot = create_slot(rich_slot_template, ctx, /*$$scope*/ ctx[7], get_rich_slot_context);

	const block = {
		c: function create() {
			if (rich_slot) rich_slot.c();
		},
		m: function mount(target, anchor) {
			if (rich_slot) {
				rich_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (rich_slot) {
				if (rich_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot(rich_slot, rich_slot_template, ctx, /*$$scope*/ ctx[7], dirty, get_rich_slot_changes, get_rich_slot_context);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(rich_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(rich_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (rich_slot) rich_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(62:4) <Card       width='100%'       height='200px'      >",
		ctx
	});

	return block;
}

// (82:4) <FillOrTwoToneButton       backgroundColour='transparent'       hoverColour='--colour-fill-hover-secondary'       hoverFillColour='--colour-fill-hover-primary'       hoverTwoToneFilter='brightness(0) saturate(100%) invert(61%) sepia(33%) saturate(7490%) hue-rotate(177deg) brightness(101%) contrast(90%)'       icon='icecream'       iconSize='1rem'      >
function create_default_slot_3(ctx) {
	let string;

	const block = {
		c: function create() {
			string = element("string");
			string.textContent = `${RandomUtility.int(2)}`;
			attr_dev(string, "class", "svelte-10hz3tp");
			add_location(string, file$1, 89, 5, 10857);
		},
		m: function mount(target, anchor) {
			insert_dev(target, string, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(string);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(82:4) <FillOrTwoToneButton       backgroundColour='transparent'       hoverColour='--colour-fill-hover-secondary'       hoverFillColour='--colour-fill-hover-primary'       hoverTwoToneFilter='brightness(0) saturate(100%) invert(61%) sepia(33%) saturate(7490%) hue-rotate(177deg) brightness(101%) contrast(90%)'       icon='icecream'       iconSize='1rem'      >",
		ctx
	});

	return block;
}

// (102:4) <FillOrTwoToneButton       backgroundColour='transparent'       hoverColour='--colour-fill-hover-secondary'       hoverFillColour='--colour-fill-hover-primary'       hoverTwoToneFilter='brightness(0) saturate(100%) invert(52%) sepia(57%) saturate(796%) hue-rotate(98deg) brightness(101%) contrast(82%)'       icon='wine_bar'       iconSize='1rem'      >
function create_default_slot_2(ctx) {
	let string;

	const block = {
		c: function create() {
			string = element("string");
			string.textContent = `${RandomUtility.int(2)}`;
			attr_dev(string, "class", "svelte-10hz3tp");
			add_location(string, file$1, 109, 5, 11476);
		},
		m: function mount(target, anchor) {
			insert_dev(target, string, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(string);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(102:4) <FillOrTwoToneButton       backgroundColour='transparent'       hoverColour='--colour-fill-hover-secondary'       hoverFillColour='--colour-fill-hover-primary'       hoverTwoToneFilter='brightness(0) saturate(100%) invert(52%) sepia(57%) saturate(796%) hue-rotate(98deg) brightness(101%) contrast(82%)'       icon='wine_bar'       iconSize='1rem'      >",
		ctx
	});

	return block;
}

// (122:4) <FillOrTwoToneButton       backgroundColour='transparent'       hoverColour='--colour-fill-hover-secondary'       hoverFillColour='--colour-fill-hover-primary'       icon='dinner_dining'       iconSize='1rem'      >
function create_default_slot_1(ctx) {
	let string;

	const block = {
		c: function create() {
			string = element("string");
			string.textContent = `${RandomUtility.int(3)}`;
			attr_dev(string, "class", "svelte-10hz3tp");
			add_location(string, file$1, 128, 5, 11996);
		},
		m: function mount(target, anchor) {
			insert_dev(target, string, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(string);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(122:4) <FillOrTwoToneButton       backgroundColour='transparent'       hoverColour='--colour-fill-hover-secondary'       hoverFillColour='--colour-fill-hover-primary'       icon='dinner_dining'       iconSize='1rem'      >",
		ctx
	});

	return block;
}

// (18:0) <Fragment   isPadded={false}   isInAnimated={true}   isOutAnimated={true}   height='auto'   width='100%'   justify='flex-start'  >
function create_default_slot$1(ctx) {
	let component;
	let container1;
	let container0;
	let heading;
	let t0;
	let t1;
	let container2;
	let string0;
	let b;
	let a;
	let t2;
	let a_href_value;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let container3;
	let string1;
	let t8;
	let t9;
	let container8;
	let container4;
	let fillortwotonebutton0;
	let t10;
	let container5;
	let fillortwotonebutton1;
	let t11;
	let container6;
	let fillortwotonebutton2;
	let t12;
	let container7;
	let fillortwotonebutton3;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	let if_block = /*$$slots*/ ctx[4].rich && create_if_block(ctx);

	fillortwotonebutton0 = new FillOrTwoToneButton({
			props: {
				backgroundColour: "transparent",
				hoverColour: "--colour-fill-hover-secondary",
				hoverFillColour: "--colour-fill-hover-primary",
				hoverTwoToneFilter: "brightness(0) saturate(100%) invert(61%) sepia(33%) saturate(7490%) hue-rotate(177deg) brightness(101%) contrast(90%)",
				icon: "icecream",
				iconSize: "1rem",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	fillortwotonebutton1 = new FillOrTwoToneButton({
			props: {
				backgroundColour: "transparent",
				hoverColour: "--colour-fill-hover-secondary",
				hoverFillColour: "--colour-fill-hover-primary",
				hoverTwoToneFilter: "brightness(0) saturate(100%) invert(52%) sepia(57%) saturate(796%) hue-rotate(98deg) brightness(101%) contrast(82%)",
				icon: "wine_bar",
				iconSize: "1rem",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	fillortwotonebutton2 = new FillOrTwoToneButton({
			props: {
				backgroundColour: "transparent",
				hoverColour: "--colour-fill-hover-secondary",
				hoverFillColour: "--colour-fill-hover-primary",
				icon: "dinner_dining",
				iconSize: "1rem",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	fillortwotonebutton3 = new FillOrTwoToneButton({
			props: {
				backgroundColour: "transparent",
				hoverColour: "--colour-fill-hover-secondary",
				hoverFillColour: "--colour-fill-hover-primary",
				hoverTwoToneFilter: "brightness(0) saturate(100%) invert(67%) sepia(59%) saturate(635%) hue-rotate(331deg) brightness(101%) contrast(104%)",
				icon: "report_problem",
				iconSize: "1rem"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			component = element("component");
			container1 = element("container");
			container0 = element("container");
			heading = element("heading");
			t0 = text(/*profilePicPlaceholder*/ ctx[0]);
			t1 = space();
			container2 = element("container");
			string0 = element("string");
			b = element("b");
			a = element("a");
			t2 = text(/*userDisplayName*/ ctx[1]);
			t3 = text("\r\n\t\t\t\t\t@");
			t4 = text(/*userName*/ ctx[2]);
			t5 = text("\r\n\t\t\t\t\t·\r\n\t\t\t\t\t");
			t6 = text(/*timestamp*/ ctx[3]);
			t7 = space();
			container3 = element("container");
			string1 = element("string");
			if (default_slot) default_slot.c();
			t8 = space();
			if (if_block) if_block.c();
			t9 = space();
			container8 = element("container");
			container4 = element("container");
			create_component(fillortwotonebutton0.$$.fragment);
			t10 = space();
			container5 = element("container");
			create_component(fillortwotonebutton1.$$.fragment);
			t11 = space();
			container6 = element("container");
			create_component(fillortwotonebutton2.$$.fragment);
			t12 = space();
			container7 = element("container");
			create_component(fillortwotonebutton3.$$.fragment);
			attr_dev(heading, "class", "svelte-10hz3tp");
			add_location(heading, file$1, 32, 4, 9668);
			attr_dev(container0, "class", "frame svelte-10hz3tp");
			add_location(container0, file$1, 29, 3, 9627);
			attr_dev(container1, "class", "pp svelte-10hz3tp");
			add_location(container1, file$1, 26, 2, 9592);
			attr_dev(a, "href", a_href_value = "javascript:void(0)");
			attr_dev(a, "class", "svelte-10hz3tp");
			add_location(a, file$1, 42, 5, 9821);
			add_location(b, file$1, 41, 4, 9811);
			add_location(string0, file$1, 40, 3, 9797);
			attr_dev(container2, "class", "meta svelte-10hz3tp");
			add_location(container2, file$1, 37, 2, 9760);
			add_location(string1, file$1, 57, 3, 10091);
			attr_dev(container3, "class", "content svelte-10hz3tp");
			add_location(container3, file$1, 54, 2, 10051);
			attr_dev(container4, "class", "reply svelte-10hz3tp");
			set_style(container4, "--colour-fill-hover-primary", "#1da1f2");
			set_style(container4, "--colour-fill-hover-secondary", "#1da1f233");
			add_location(container4, file$1, 74, 3, 10342);
			attr_dev(container5, "class", "retweet svelte-10hz3tp");
			set_style(container5, "--colour-fill-hover-primary", "#17bf63");
			set_style(container5, "--colour-fill-hover-secondary", "#17bf6333");
			add_location(container5, file$1, 94, 3, 10961);
			attr_dev(container6, "class", "like svelte-10hz3tp");
			set_style(container6, "--colour-fill-hover-primary", "var(--colour-accent-primary)");
			set_style(container6, "--colour-fill-hover-secondary", "var(--colour-accent-secondary)");
			add_location(container6, file$1, 114, 3, 11580);
			attr_dev(container7, "class", "report svelte-10hz3tp");
			set_style(container7, "--colour-fill-hover-primary", "var(--colour-warn-primary)");
			set_style(container7, "--colour-fill-hover-secondary", "var(--colour-warn-secondary)");
			add_location(container7, file$1, 133, 3, 12100);
			attr_dev(container8, "class", "actions svelte-10hz3tp");
			add_location(container8, file$1, 71, 2, 10302);
			attr_dev(component, "class", "svelte-10hz3tp");
			add_location(component, file$1, 25, 1, 9577);
		},
		m: function mount(target, anchor) {
			insert_dev(target, component, anchor);
			append_dev(component, container1);
			append_dev(container1, container0);
			append_dev(container0, heading);
			append_dev(heading, t0);
			append_dev(component, t1);
			append_dev(component, container2);
			append_dev(container2, string0);
			append_dev(string0, b);
			append_dev(b, a);
			append_dev(a, t2);
			append_dev(b, t3);
			append_dev(b, t4);
			append_dev(b, t5);
			append_dev(b, t6);
			append_dev(component, t7);
			append_dev(component, container3);
			append_dev(container3, string1);

			if (default_slot) {
				default_slot.m(string1, null);
			}

			append_dev(container3, t8);
			if (if_block) if_block.m(container3, null);
			append_dev(component, t9);
			append_dev(component, container8);
			append_dev(container8, container4);
			mount_component(fillortwotonebutton0, container4, null);
			append_dev(container8, t10);
			append_dev(container8, container5);
			mount_component(fillortwotonebutton1, container5, null);
			append_dev(container8, t11);
			append_dev(container8, container6);
			mount_component(fillortwotonebutton2, container6, null);
			append_dev(container8, t12);
			append_dev(container8, container7);
			mount_component(fillortwotonebutton3, container7, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(a, "click", /*click_handler*/ ctx[6], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*profilePicPlaceholder*/ 1) set_data_dev(t0, /*profilePicPlaceholder*/ ctx[0]);
			if (!current || dirty & /*userDisplayName*/ 2) set_data_dev(t2, /*userDisplayName*/ ctx[1]);
			if (!current || dirty & /*userName*/ 4) set_data_dev(t4, /*userName*/ ctx[2]);
			if (!current || dirty & /*timestamp*/ 8) set_data_dev(t6, /*timestamp*/ ctx[3]);

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			}

			if (/*$$slots*/ ctx[4].rich) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$$slots*/ 16) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(container3, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			const fillortwotonebutton0_changes = {};

			if (dirty & /*$$scope*/ 128) {
				fillortwotonebutton0_changes.$$scope = { dirty, ctx };
			}

			fillortwotonebutton0.$set(fillortwotonebutton0_changes);
			const fillortwotonebutton1_changes = {};

			if (dirty & /*$$scope*/ 128) {
				fillortwotonebutton1_changes.$$scope = { dirty, ctx };
			}

			fillortwotonebutton1.$set(fillortwotonebutton1_changes);
			const fillortwotonebutton2_changes = {};

			if (dirty & /*$$scope*/ 128) {
				fillortwotonebutton2_changes.$$scope = { dirty, ctx };
			}

			fillortwotonebutton2.$set(fillortwotonebutton2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(if_block);
			transition_in(fillortwotonebutton0.$$.fragment, local);
			transition_in(fillortwotonebutton1.$$.fragment, local);
			transition_in(fillortwotonebutton2.$$.fragment, local);
			transition_in(fillortwotonebutton3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			transition_out(if_block);
			transition_out(fillortwotonebutton0.$$.fragment, local);
			transition_out(fillortwotonebutton1.$$.fragment, local);
			transition_out(fillortwotonebutton2.$$.fragment, local);
			transition_out(fillortwotonebutton3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(component);
			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
			destroy_component(fillortwotonebutton0);
			destroy_component(fillortwotonebutton1);
			destroy_component(fillortwotonebutton2);
			destroy_component(fillortwotonebutton3);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(18:0) <Fragment   isPadded={false}   isInAnimated={true}   isOutAnimated={true}   height='auto'   width='100%'   justify='flex-start'  >",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let fragment;
	let current;

	fragment = new Fragment({
			props: {
				isPadded: false,
				isInAnimated: true,
				isOutAnimated: true,
				height: "auto",
				width: "100%",
				justify: "flex-start",
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(fragment.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(fragment, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const fragment_changes = {};

			if (dirty & /*$$scope, $$slots, timestamp, userName, userDisplayName, profilePicPlaceholder*/ 159) {
				fragment_changes.$$scope = { dirty, ctx };
			}

			fragment.$set(fragment_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(fragment.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(fragment.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(fragment, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

"use strict";

/* eslint-disable array-bracket-newline, array-element-newline */
const Emojis = [
	"😀",
	"😃",
	"😄",
	"😁",
	"😆",
	"🤩",
	"😅",
	"😂",
	"🤣",
	"☺️",
	"😊",
	"😇",
	"🙂",
	"🙃",
	"😉",
	"😌",
	"😍",
	"😘",
	"😗",
	"😙",
	"😚",
	"😋",
	"🤪",
	"😜",
	"😝",
	"😛",
	"🤑",
	"🤗",
	"🤓",
	"😎",
	"🤡",
	"🤠",
	"😏",
	"😒",
	"😞",
	"😔",
	"😟",
	"😕",
	"🙁",
	"☹️",
	"😣",
	"😖",
	"😫",
	"😩",
	"😤",
	"😠",
	"😡",
	"🤬",
	"😶",
	"😐",
	"😑",
	"😯",
	"😦",
	"😧",
	"😮",
	"😲",
	"😵",
	"🤯",
	"😳",
	"😱",
	"😨",
	"😰",
	"😢",
	"😥",
	"🤤",
	"😭",
	"😓",
	"😪",
	"😴",
	"🥱",
	"🙄",
	"🤨",
	"🧐",
	"🤔",
	"🤫",
	"🤭",
	"🤥",
	"😬",
	"🤐",
	"🤢",
	"🤮",
	"🤧",
	"😷",
	"🤒",
	"🤕",
	"😈",
	"👿",
	"👹",
	"👺",
	"💩",
	"👻",
	"💀",
	"☠️",
	"👽",
	"👾",
	"🤖",
	"🎃",
	"😺",
	"😸",
	"😹",
	"😻",
	"😼",
	"😽",
	"🙀",
	"😿",
	"😾",
	"👐",
	"🙌",
	"👏",
	"🙏",
	"🤲",
	"🤝",
	"👍",
	"👎",
	"👊",
	"✊",
	"🤛",
	"🤜",
	"🤞",
	"✌️",
	"🤘",
	"🤏",
	"👌",
	"👈",
	"👉",
	"👆",
	"👇",
	"☝️",
	"✋",
	"🤚",
	"🖐",
	"🖖",
	"👋",
	"🤙",
	"💪",
	"🖕",
	"🤟",
	"✍️",
	"🤳",
	"💅",
	"🖖",
	"💄",
	"💋",
	"👄",
	"👅",
	"👂",
	"🦻",
	"👃",
	"🦵",
	"🦶",
	"🦾",
	"🦿",
	"👣",
	"👁",
	"👀",
	"🗣",
	"👤",
	"👥",
	"👶",
	"👦",
	"👧",
	"🧒",
	"👨",
	"👩",
	"🧑",
	"",
	"🦰",
	"🦱",
	"🦲",
	"🦳",
	"🐶",
	"🐱",
	"🐭",
	"🐹",
	"🐰",
	"🦊",
	"🐻",
	"🐼",
	"🐨",
	"🐯",
	"🦁",
	"🐮",
	"🐷",
	"🐽",
	"🐸",
	"🐵",
	"🙊",
	"🙉",
	"🙊",
	"🐒",
	"🐔",
	"🐧",
	"🐦",
	"🐤",
	"🐣",
	"🐥",
	"🦆",
	"🦩",
	"🦅",
	"🦉",
	"🦇",
	"🐺",
	"🐗",
	"🐴",
	"🦄",
	"🐝",
	"🐛",
	"🦋",
	"🐌",
	"🐚",
	"🦗",
	"🐞",
	"🐜",
	"🕷",
	"🕸",
	"🐢",
	"🐍",
	"🦎",
	"🦂",
	"🦀",
	"🦑",
	"🐙",
	"🦐",
	"🐠",
	"🐟",
	"🐡",
	"🐬",
	"🦈",
	"🐳",
	"🐋",
	"🐊",
	"🐆",
	"🐅",
	"🐃",
	"🐂",
	"🐄",
	"🦌",
	"🐪",
	"🐫",
	"🐘",
	"🦏",
	"🦍",
	"🐎",
	"🐖",
	"🐐",
	"🐏",
	"🐑",
	"🐕",
	"🐩",
	"🦮",
	"🐕‍🦺",
	"🐈",
	"🐓",
	"🦃",
	"🕊",
	"🐇",
	"🐁",
	"🐀",
	"🐿",
	"🦓",
	"🦒",
	"🦔",
	"🦧",
	"🦥",
	"🦦",
	"🦨",
	"🦕",
	"🦖",
	"🦪",
	"🐾",
	"🐉",
	"🐲",
	"🌵",
	"🎄",
	"🌲",
	"🌳",
	"🌴",
	"🌱",
	"🌿",
	"☘️",
	"🍀",
	"🎍",
	"🎋",
	"🍃",
	"🍂",
	"🍁",
	"🍄",
	"🌾",
	"💐",
	"🌷",
	"🌹",
	"🥀",
	"🌻",
	"🌼",
	"🌸",
	"🌺",
	"🌎",
	"🌍",
	"🌏",
	"🌕",
	"🌖",
	"🌗",
	"🌘",
	"🌑",
	"🌒",
	"🌓",
	"🌔",
	"🌚",
	"🌝",
	"🌞",
	"🌛",
	"🌜",
	"🌙",
	"🪐",
	"💫",
	"⭐️",
	"🌟",
	"✨",
	"⚡️",
	"🔥",
	"💥",
	"☄️",
	"☀️",
	"🌤",
	"⛅️",
	"🌥",
	"🌦",
	"🌈",
	"☁️",
	"🌧",
	"⛈",
	"🌩",
	"🌨",
	"☃️",
	"⛄️",
	"❄️",
	"🌬",
	"💨",
	"🌪",
	"🌫",
	"🌊",
	"💧",
	"💦",
	"☔️",
	"🍏",
	"🍎",
	"🍐",
	"🍊",
	"🍋",
	"🍌",
	"🍉",
	"🍇",
	"🍓",
	"🍈",
	"🍒",
	"🍑",
	"🍍",
	"🥝",
	"🥑",
	"🍅",
	"🍆",
	"🥒",
	"🥕",
	"🌽",
	"🌶",
	"🧄",
	"🧅",
	"🥔",
	"🍠",
	"🌰",
	"🥜",
	"🍯",
	"🥐",
	"🍞",
	"🥖",
	"🧀",
	"🥚",
	"🍳",
	"🥓",
	"🥞",
	"🍤",
	"🍗",
	"🍖",
	"🍕",
	"🌭",
	"🍔",
	"🍟",
	"🥙",
	"🌮",
	"🌯",
	"🥗",
	"🥘",
	"🍝",
	"🍜",
	"🍲",
	"🍥",
	"🍣",
	"🍱",
	"🍛",
	"🍚",
	"🍙",
	"🍘",
	"🍢",
	"🍡",
	"🍧",
	"🍨",
	"🍦",
	"🍰",
	"🎂",
	"🍮",
	"🍭",
	"🍬",
	"🍫",
	"🍿",
	"🍩",
	"🍪",
	"🥛",
	"🍼",
	"☕️",
	"🍵",
	"🍶",
	"🍺",
	"🍻",
	"🥂",
	"🍷",
	"🥃",
	"🍸",
	"🍹",
	"🍾",
	"🧃",
	"🧉",
	"🧊",
	"🥄",
	"🍴",
	"🍽",
	"🥥",
	"🥨",
	"🥩",
	"🥪",
	"🥣",
	"🥫",
	"🧇",
	"🧆",
	"🧈",
	"🥟",
	"🥠",
	"🥡",
	"🥧",
	"🥤",
	"🥢",
	"⚽️",
	"🏀",
	"🏈",
	"⚾️",
	"🎾",
	"🏐",
	"🏉",
	"🎱",
	"🏓",
	"🏸",
	"🥅",
	"🏒",
	"🏑",
	"🏏",
	"⛳️",
	"🏹",
	"🎣",
	"🥊",
	"🥋",
	"⛸",
	"🎿",
	"⛷",
	"🏂",
	"🏋️",
	"🤺",
	"🏌️",
	"🏄",
	"🏊",
	"🚣",
	"🏇",
	"🚵",
	"🪂",
	"🎽",
	"🏅",
	"🎖",
	"🥇",
	"🥈",
	"🥉",
	"🏆",
	"🏵",
	"🎗",
	"🎫",
	"🎟",
	"🎪",
	"🎭",
	"🎨",
	"🎬",
	"🎤",
	"🎧",
	"🎼",
	"🎹",
	"🥁",
	"🎷",
	"🎺",
	"🎸",
	"🎻",
	"🪕",
	"🎲",
	"🎯",
	"🎳",
	"🎮",
	"🎰",
	"🛷",
	"🥌",
	"🪀",
	"🪁",
	"🚗",
	"🚕",
	"🚙",
	"🚌",
	"🚎",
	"🏎",
	"🚓",
	"🚑",
	"🚒",
	"🚐",
	"🚚",
	"🚛",
	"🚜",
	"🛴",
	"🚲",
	"🛵",
	"🛺",
	"🏍",
	"🦽",
	"🦼",
	"🚨",
	"🚔",
	"🚍",
	"🚘",
	"🚖",
	"🚡",
	"🚠",
	"🚟",
	"🚃",
	"🚋",
	"🚞",
	"🚝",
	"🚄",
	"🚅",
	"🚈",
	"🚂",
	"🚆",
	"🚇",
	"🚊",
	"🚉",
	"🚁",
	"🛩",
	"✈️",
	"🛫",
	"🛬",
	"🚀",
	"🛰",
	"💺",
	"🛶",
	"⛵️",
	"🛥",
	"🚤",
	"🛳",
	"⛴",
	"🚢",
	"⚓️",
	"🚧",
	"⛽️",
	"🚏",
	"🚦",
	"🚥",
	"🗺",
	"🗿",
	"🗽",
	"⛲️",
	"🗼",
	"🏰",
	"🏯",
	"🏟",
	"🎡",
	"🎢",
	"🎠",
	"⛱",
	"🏖",
	"🏝",
	"⛰",
	"🏔",
	"🗻",
	"🌋",
	"🏜",
	"🏕",
	"⛺️",
	"🛤",
	"🛣",
	"🏗",
	"🏭",
	"🏠",
	"🏡",
	"🏘",
	"🏚",
	"🏢",
	"🏬",
	"🏣",
	"🏤",
	"🏥",
	"🏦",
	"🏨",
	"🏪",
	"🏫",
	"🏩",
	"💒",
	"🏛",
	"⛪️",
	"🕌",
	"🕍",
	"🕋",
	"🛕",
	"⛩",
	"🗾",
	"🎑",
	"🏞",
	"🌅",
	"🌄",
	"🌠",
	"🎇",
	"🎆",
	"🌇",
	"🌆",
	"🏙",
	"🌃",
	"🌌",
	"🌉",
	"🌁",
	"🛸",
	"⌚️",
	"📱",
	"📲",
	"💻",
	"⌨️",
	"🖥",
	"🖨",
	"🖱",
	"🖲",
	"🕹",
	"🗜",
	"💽",
	"💾",
	"💿",
	"📀",
	"📼",
	"📷",
	"📸",
	"📹",
	"🎥",
	"📽",
	"🎞",
	"📞",
	"☎️",
	"📟",
	"📠",
	"📺",
	"📻",
	"🎙",
	"🎚",
	"🎛",
	"⏱",
	"⏲",
	"⏰",
	"🕰",
	"⌛️",
	"⏳",
	"📡",
	"🔋",
	"🔌",
	"💡",
	"🔦",
	"🕯",
	"🗑",
	"🛢",
	"💸",
	"💵",
	"💴",
	"💶",
	"💷",
	"💰",
	"💳",
	"💎",
	"⚖️",
	"🔧",
	"🔨",
	"⚒",
	"🛠",
	"⛏",
	"🔩",
	"⚙️",
	"⛓",
	"🔫",
	"💣",
	"🔪",
	"🗡",
	"⚔️",
	"🪓",
	"🦯",
	"🛡",
	"🚬",
	"⚰️",
	"⚱️",
	"🏺",
	"🔮",
	"📿",
	"💈",
	"⚗️",
	"🔭",
	"🔬",
	"🕳",
	"💊",
	"💉",
	"🩸",
	"🩹",
	"🩺",
	"🌡",
	"🪒",
	"🚽",
	"🚰",
	"🚿",
	"🛁",
	"🛀",
	"🛎",
	"🔑",
	"🗝",
	"🚪",
	"🪑",
	"🛋",
	"🛏",
	"🛌",
	"🖼",
	"🛍",
	"🛒",
	"🎁",
	"🎈",
	"🎏",
	"🎀",
	"🎊",
	"🎉",
	"🎎",
	"🏮",
	"🎐",
	"✉️",
	"📩",
	"📨",
	"📧",
	"💌",
	"📥",
	"📤",
	"📦",
	"🏷",
	"📪",
	"📫",
	"📬",
	"📭",
	"📮",
	"📯",
	"📜",
	"📃",
	"📄",
	"📑",
	"📊",
	"📈",
	"📉",
	"🗒",
	"🗓",
	"📆",
	"📅",
	"📇",
	"🗃",
	"🗳",
	"🗄",
	"📋",
	"📁",
	"📂",
	"🗂",
	"🗞",
	"📰",
	"📓",
	"📔",
	"📒",
	"📕",
	"📗",
	"📘",
	"📙",
	"📚",
	"📖",
	"🔖",
	"🔗",
	"📎",
	"🖇",
	"📐",
	"📏",
	"📌",
	"📍",
	"📌",
	"🎌",
	"🏳️",
	"🏴",
	"🏁",
	"🪔",
	"✂️",
	"🖊",
	"🖋",
	"✒️",
	"🖌",
	"🖍",
	"📝",
	"✏️",
	"🔍",
	"🔎",
	"🔏",
	"🔐",
	"🔒",
	"🔓",
	"❤️",
	"🧡",
	"💛",
	"💚",
	"💙",
	"💜",
	"🖤",
	"🤍",
	"🤎",
	"💔",
	"❣️",
	"💕",
	"💞",
	"💓",
	"💗",
	"💖",
	"💘",
	"💝",
	"💟",
	"☮️",
	"✝️",
	"☪️",
	"🕉",
	"☸️",
	"✡️",
	"🔯",
	"🕎",
	"☯️",
	"☦️",
	"🛐",
	"⛎",
	"♈️",
	"♉️",
	"♊️",
	"♋️",
	"♌️",
	"♍️",
	"♎️",
	"♏️",
	"♐️",
	"♑️",
	"♒️",
	"♓️",
	"🆔",
	"⚛️",
	"🉑",
	"☢️",
	"☣️",
	"📴",
	"📳",
	"🈶",
	"🈚️",
	"🈸",
	"🈺",
	"🈷️",
	"✴️",
	"🆚",
	"💮",
	"🉐",
	"㊙️",
	"㊗️",
	"🈴",
	"🈵",
	"🈹",
	"🈲",
	"🅰️",
	"🅱️",
	"🆎",
	"🆑",
	"🅾️",
	"🆘",
	"❌",
	"⭕️",
	"🛑",
	"⛔️",
	"📛",
	"🚫",
	"💯",
	"💢",
	"♨️",
	"🚷",
	"🚯",
	"🚳",
	"🚱",
	"🔞",
	"📵",
	"🚭",
	"❗️",
	"❕",
	"❓",
	"❔",
	"‼️",
	"⁉️",
	"🔅",
	"🔆",
	"〽️",
	"⚠️",
	"🚸",
	"🔱",
	"⚜️",
	"🔰",
	"♻️",
	"✅",
	"🈯️",
	"💹",
	"❇️",
	"✳️",
	"❎",
	"🌐",
	"💠",
	"Ⓜ️",
	"🌀",
	"💤",
	"🏧",
	"🚾",
	"♿️",
	"🅿️",
	"🈳",
	"🈂️",
	"🛂",
	"🛃",
	"🛄",
	"🛅",
	"🚹",
	"🚺",
	"🚼",
	"🚻",
	"🚮",
	"🎦",
	"📶",
	"🈁",
	"🔣",
	"ℹ️",
	"🔤",
	"🔡",
	"🔠",
	"🆖",
	"🆗",
	"🆙",
	"🆒",
	"🆕",
	"🆓",
	"0️⃣",
	"1️⃣",
	"2️⃣",
	"3️⃣",
	"4️⃣",
	"5️⃣",
	"6️⃣",
	"7️⃣",
	"8️⃣",
	"9️⃣",
	"🔟",
	"🔢",
	"#️⃣",
	"*️⃣",
	"▶️",
	"⏸",
	"⏯",
	"⏹",
	"⏺",
	"⏭",
	"⏮",
	"⏩",
	"⏪",
	"⏫",
	"⏬",
	"◀️",
	"🔼",
	"🔽",
	"➡️",
	"⬅️",
	"⬆️",
	"⬇️",
	"↗️",
	"↘️",
	"↙️",
	"↖️",
	"↕️",
	"↔️",
	"↪️",
	"↩️",
	"⤴️",
	"⤵️",
	"🔀",
	"🔁",
	"🔂",
	"🔄",
	"🔃",
	"🎵",
	"🎶",
	"➕",
	"➖",
	"➗",
	"✖️",
	"💲",
	"💱",
	"™️",
	"©️",
	"®️",
	"〰️",
	"➰",
	"➿",
	"🔚",
	"🔙",
	"🔛",
	"🔝",
	"✔️",
	"☑️",
	"🔘",
	"🔴",
	"🟠",
	"🟡",
	"🟢",
	"🔵",
	"🟣",
	"⚫️",
	"⚪️",
	"🟤",
	"🔺",
	"🔻",
	"🔸",
	"🔹",
	"🔶",
	"🔷",
	"🔳",
	"🔲",
	"▪️",
	"▫️",
	"◾️",
	"◽️",
	"◼️",
	"◻️",
	"⬛️",
	"⬜️",
	"🟥",
	"🟧",
	"🟨",
	"🟩",
	"🟦",
	"🟪",
	"🟫",
	"🔈",
	"🔇",
	"🔉",
	"🔊",
	"🔔",
	"🔕",
	"📣",
	"📢",
	"👁‍🗨",
	"💬",
	"💭",
	"🗯",
	"♠️",
	"♣️",
	"♥️",
	"♦️",
	"🃏",
	"🎴",
	"🀄️",
	"🕐",
	"🕑",
	"🕒",
	"🕓",
	"🕔",
	"🕕",
	"🕖",
	"🕗",
	"🕘",
	"🕙",
	"🕚",
	"🕛",
	"🕜",
	"🕝",
	"🕞",
	"🕟",
	"🕠",
	"🕡",
	"🕢",
	"🕣",
	"🕤",
	"🕥",
	"🕦",
	"🕧",
	"⏏",
	"♀",
	"♂",
	"⚕",
	"♾️",
	""
];

const DisplayNames = [
	"Your Mom",
	"Miley Cyrus",
	"Kim Kardashian",
	"Kayne West",
	"Margaret Thatcher",
	"George Washington",
	"Ghandi",
	"Nelson Mandela",
	"Christopher Columbus",
	"Justin Beiber",
	"Lady Gaga",
	"Katy Perry",
	"Justin Timberlake",
	"Jay Leno",
	"David Letterman",
	"Elle McPherson",
	"Jennifer Aniston",
	"Donald Duck",
	"Pluto",
	"Goofy",
	"Johnny Depp",
	"Brittney Spears",
	"Paris Hilton",
	"Hugh Jackman",
	"Vladimir Putin",
	"Daniel Radcliffe",
	"David Beckham",
	"Madonna",
	"Eminem",
	"Matt Damon",
	"Jack Nicholson",
	"Kevin Spacey",
	"Kylie Minogue",
	"Roger Federer",
	"Andrew Murray",
	"Serena Williams",
	"Brad Pitt",
	"Mickey Mouse",
	"Simon Cowell",
	"Ludwig Beethoven",
	"Warren Buffett",
	"Lewis Carroll",
	"Queen Elizabeth II",
	"Charles Darwin",
	"Albert Einstein",
	"Henry Ford",
	"Bill Gates",
	"Steve Jobs",
	"Vincent van Gogh",
	"Adolph Hitler",
	"Thomas Jefferson",
	"Stanley Kubrik",
	"Charles Lindbergh",
	"Courtney Love",
	"Kurt Cobain",
	"Michelangelo",
	"Amadeus Mozart",
	"Sir Isaac Newton",
	"George Orwell",
	"Andy Warhol",
	"Orson Welles",
	"Leonardo Da Vinci",
	"Walt Disney",
	"Abraham Lincoln",
	"William Shakespeare",
	"Martin Luther King",
	"John F Kennedy",
	"Princess Diana",
	"Mother Teresa",
	"Thomas Edison",
	"Benjamin Franklin",
	"Neil Armstrong",
	"Napoleon",
	"Elvis Presley",
	"Mohammad Ali",
	"Marilyn Monroe",
	"Pablo Picasso",
	"Charles Dickens",
	"Cleopatra",
	"John Lennon",
	"Michael Jordan",
	"Mark Twain",
	"Nicole Kidman",
	"Barack Obama",
	"Robert Pattison",
	"Hugh Heffner",
	"KJ Rowling",
	"Bill Clinton",
	"Elizabeth Taylor",
	"Tom Cruise",
	"Clint Eastwood",
	"Alfred Hitchcock",
	"Stephen Hawking",
	"Tom Hanks",
	"Oprah Winfrey",
	"Beyonce",
	"Hilary Clinton",
	"Dr Suess",
	"Ray Charles",
	"Sean Connery",
	"Julia Roberts",
	"Pele",
	"Meryl Streep",
	"Helen Keller",
	"Robin Williams",
	"Steve Martin",
	"Fred Astaire",
	"Whoopi Goldberg",
	"Jane Austen",
	"Bob Hope",
	"Jessica Simpson",
	"Frank Lloyd Wright",
	"Pamela Anderson",
	"Susan Boyle",
	"Mae West",
	"Snoopy",
	"Jim Carrey",
	"Michael J Fox"
];

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Tweet", slots, ['default','rich']);
	const $$slots = compute_slots(slots);
	let { profilePicPlaceholder = RandomUtility.value(Emojis) } = $$props;
	let { userDisplayName = RandomUtility.value(DisplayNames) } = $$props;
	let { userName = userDisplayName.toLowerCase().replace(/[^\w]/g, "_") } = $$props;
	let { timestamp = `${Math.min(RandomUtility.int(2), 48)}${RandomUtility.string(1, "hm")}` } = $$props;
	const writable_props = ["profilePicPlaceholder", "userDisplayName", "userName", "timestamp"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Tweet> was created with unknown prop '${key}'`);
	});

	const click_handler = () => alert("Ouch, you poked me!");

	$$self.$$set = $$props => {
		if ("profilePicPlaceholder" in $$props) $$invalidate(0, profilePicPlaceholder = $$props.profilePicPlaceholder);
		if ("userDisplayName" in $$props) $$invalidate(1, userDisplayName = $$props.userDisplayName);
		if ("userName" in $$props) $$invalidate(2, userName = $$props.userName);
		if ("timestamp" in $$props) $$invalidate(3, timestamp = $$props.timestamp);
		if ("$$scope" in $$props) $$invalidate(7, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		Emojis,
		DisplayNames,
		RandomUtility,
		FillOrTwoToneButton,
		Card,
		Fragment,
		profilePicPlaceholder,
		userDisplayName,
		userName,
		timestamp
	});

	$$self.$inject_state = $$props => {
		if ("profilePicPlaceholder" in $$props) $$invalidate(0, profilePicPlaceholder = $$props.profilePicPlaceholder);
		if ("userDisplayName" in $$props) $$invalidate(1, userDisplayName = $$props.userDisplayName);
		if ("userName" in $$props) $$invalidate(2, userName = $$props.userName);
		if ("timestamp" in $$props) $$invalidate(3, timestamp = $$props.timestamp);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		profilePicPlaceholder,
		userDisplayName,
		userName,
		timestamp,
		$$slots,
		slots,
		click_handler,
		$$scope
	];
}

class Tweet extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			profilePicPlaceholder: 0,
			userDisplayName: 1,
			userName: 2,
			timestamp: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Tweet",
			options,
			id: create_fragment$1.name
		});
	}

	get profilePicPlaceholder() {
		return this.$$.ctx[0];
	}

	set profilePicPlaceholder(profilePicPlaceholder) {
		this.$set({ profilePicPlaceholder });
		flush();
	}

	get userDisplayName() {
		return this.$$.ctx[1];
	}

	set userDisplayName(userDisplayName) {
		this.$set({ userDisplayName });
		flush();
	}

	get userName() {
		return this.$$.ctx[2];
	}

	set userName(userName) {
		this.$set({ userName });
		flush();
	}

	get timestamp() {
		return this.$$.ctx[3];
	}

	set timestamp(timestamp) {
		this.$set({ timestamp });
		flush();
	}
}

var undefined$1 = undefined;

/* src\ui\routes\DashboardRoute.svelte generated by Svelte v3.38.2 */
const file = "src\\ui\\routes\\DashboardRoute.svelte";

// (6:0) <Fragment   isPadded={false}   isInAnimated={true}   isOutAnimated={true}   height='100vh'   width='100%'   justify='center'  >
function create_default_slot(ctx) {
	let component;
	let container0;
	let sidebar;
	let t;
	let container1;
	let tweet;
	let current;
	sidebar = new Sidebar({ $$inline: true });
	tweet = new Tweet({ $$inline: true });

	const block = {
		c: function create() {
			component = element("component");
			container0 = element("container");
			create_component(sidebar.$$.fragment);
			t = space();
			container1 = element("container");
			create_component(tweet.$$.fragment);
			attr_dev(container0, "class", "sidebar svelte-2hbax7");
			add_location(container0, file, 14, 2, 329);
			attr_dev(container1, "class", "main svelte-2hbax7");
			add_location(container1, file, 19, 2, 400);
			attr_dev(component, "class", "svelte-2hbax7");
			add_location(component, file, 13, 1, 314);
		},
		m: function mount(target, anchor) {
			insert_dev(target, component, anchor);
			append_dev(component, container0);
			mount_component(sidebar, container0, null);
			append_dev(component, t);
			append_dev(component, container1);
			mount_component(tweet, container1, null);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(sidebar.$$.fragment, local);
			transition_in(tweet.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(sidebar.$$.fragment, local);
			transition_out(tweet.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(component);
			destroy_component(sidebar);
			destroy_component(tweet);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(6:0) <Fragment   isPadded={false}   isInAnimated={true}   isOutAnimated={true}   height='100vh'   width='100%'   justify='center'  >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let fragment;
	let current;

	fragment = new Fragment({
			props: {
				isPadded: false,
				isInAnimated: true,
				isOutAnimated: true,
				height: "100vh",
				width: "100%",
				justify: "center",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(fragment.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(fragment, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const fragment_changes = {};

			if (dirty & /*$$scope*/ 1) {
				fragment_changes.$$scope = { dirty, ctx };
			}

			fragment.$set(fragment_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(fragment.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(fragment.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(fragment, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("DashboardRoute", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<DashboardRoute> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Fragment, Sidebar, Tweet });
	return [];
}

class DashboardRoute extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "DashboardRoute",
			options,
			id: create_fragment.name
		});
	}
}

export default DashboardRoute;
//# sourceMappingURL=DashboardRoute-00851c40.js.map
