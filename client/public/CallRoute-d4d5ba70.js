
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { q as assign, c as create_component, u as empty, m as mount_component, i as insert_dev, w as get_spread_update, x as get_spread_object, y as group_outros, g as transition_out, j as destroy_component, z as check_outros, f as transition_in, h as detach_dev, k as dispatch_dev, A as create_slot, B as update_slot, F as Fragment, D as binding_callbacks, E as bind, e as element, s as space, G as set_style, H as CSSUtility, a as attr_dev, b as add_location, d as append_dev, I as add_flush_callback, J as compute_rest_props, n as noop, K as subscribe, v as validate_slots, L as AppBar, M as writable, N as validate_store, O as exclude_internal_props, l as SvelteComponentDev, o as init, p as safe_not_equal, P as flush, Q as Button, R as is_function, T as globals, U as toggle_class, V as listen_dev, W as run_all, X as createEventDispatcher, Y as component_subscribe, Z as set_store_value, _ as WindowUtility, t as text, $ as Gradient2, a0 as onMount, a1 as push, C as Ctx, a2 as Input, a3 as Dialog, a4 as ToastItem, a5 as Levels } from './index-7b0e3c35.js';

var undefined$3 = undefined;

/* src\ui\blocks\fragments\AppBarFragment.svelte generated by Svelte v3.38.2 */
const file$4 = "src\\ui\\blocks\\fragments\\AppBarFragment.svelte";
const get_appBar_slot_changes = dirty => ({});
const get_appBar_slot_context = ctx => ({});

// (28:2) {#if appBarComponent != null}
function create_if_block(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;

	const switch_instance_spread_levels = [
		{ title: /*title*/ ctx[1] },
		{
			expandedHeightW: /*expandedHeightW*/ ctx[8]
		},
		{
			borderRadius: /*isRounded*/ ctx[5]
			? "var(--roundness) var(--roundness) 0 0"
			: 0
		},
		/*appBarProps*/ ctx[2]
	];

	var switch_value = /*appBarComponent*/ ctx[0];

	function switch_props(ctx) {
		let switch_instance_props = {};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		return {
			props: switch_instance_props,
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	const block = {
		c: function create() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert_dev(target, switch_instance_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const switch_instance_changes = (dirty & /*title, expandedHeightW, isRounded, appBarProps*/ 294)
			? get_spread_update(switch_instance_spread_levels, [
					dirty & /*title*/ 2 && { title: /*title*/ ctx[1] },
					dirty & /*expandedHeightW*/ 256 && {
						expandedHeightW: /*expandedHeightW*/ ctx[8]
					},
					dirty & /*isRounded*/ 32 && {
						borderRadius: /*isRounded*/ ctx[5]
						? "var(--roundness) var(--roundness) 0 0"
						: 0
					},
					dirty & /*appBarProps*/ 4 && get_spread_object(/*appBarProps*/ ctx[2])
				])
			: {};

			if (switch_value !== (switch_value = /*appBarComponent*/ ctx[0])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(28:2) {#if appBarComponent != null}",
		ctx
	});

	return block;
}

// (27:21)     
function fallback_block(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*appBarComponent*/ ctx[0] != null && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*appBarComponent*/ ctx[0] != null) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*appBarComponent*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block.name,
		type: "fallback",
		source: "(27:21)     ",
		ctx
	});

	return block;
}

// (38:1) <Scene    bind:height={sceneHeight}    width='auto'    borderRadius={isRounded ? '0 0 var(--roundness) var(--roundness)' : 0}    {isScrollable}    {isScrollableW}    {...$$restProps}   >
function create_default_slot$3(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[15], dirty, null, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$3.name,
		type: "slot",
		source: "(38:1) <Scene    bind:height={sceneHeight}    width='auto'    borderRadius={isRounded ? '0 0 var(--roundness) var(--roundness)' : 0}    {isScrollable}    {isScrollableW}    {...$$restProps}   >",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let component;
	let t;
	let scene;
	let updating_height;
	let current;
	const appBar_slot_template = /*#slots*/ ctx[13].appBar;
	const appBar_slot = create_slot(appBar_slot_template, ctx, /*$$scope*/ ctx[15], get_appBar_slot_context);
	const appBar_slot_or_fallback = appBar_slot || fallback_block(ctx);

	const scene_spread_levels = [
		{ width: "auto" },
		{
			borderRadius: /*isRounded*/ ctx[5]
			? "0 0 var(--roundness) var(--roundness)"
			: 0
		},
		{ isScrollable: /*isScrollable*/ ctx[6] },
		{ isScrollableW: /*isScrollableW*/ ctx[7] },
		/*$$restProps*/ ctx[10]
	];

	function scene_height_binding(value) {
		/*scene_height_binding*/ ctx[14](value);
	}

	let scene_props = {
		$$slots: { default: [create_default_slot$3] },
		$$scope: { ctx }
	};

	for (let i = 0; i < scene_spread_levels.length; i += 1) {
		scene_props = assign(scene_props, scene_spread_levels[i]);
	}

	if (/*sceneHeight*/ ctx[9] !== void 0) {
		scene_props.height = /*sceneHeight*/ ctx[9];
	}

	scene = new Fragment({ props: scene_props, $$inline: true });
	binding_callbacks.push(() => bind(scene, "height", scene_height_binding));

	const block = {
		c: function create() {
			component = element("component");
			if (appBar_slot_or_fallback) appBar_slot_or_fallback.c();
			t = space();
			create_component(scene.$$.fragment);
			set_style(component, "--height", CSSUtility.parse(/*height*/ ctx[3]));
			set_style(component, "--width", CSSUtility.parse(/*width*/ ctx[4]));
			attr_dev(component, "class", "svelte-f67efg");
			add_location(component, file$4, 20, 0, 651);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, component, anchor);

			if (appBar_slot_or_fallback) {
				appBar_slot_or_fallback.m(component, null);
			}

			append_dev(component, t);
			mount_component(scene, component, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (appBar_slot) {
				if (appBar_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
					update_slot(appBar_slot, appBar_slot_template, ctx, /*$$scope*/ ctx[15], dirty, get_appBar_slot_changes, get_appBar_slot_context);
				}
			} else {
				if (appBar_slot_or_fallback && appBar_slot_or_fallback.p && dirty & /*appBarComponent, title, expandedHeightW, isRounded, appBarProps*/ 295) {
					appBar_slot_or_fallback.p(ctx, dirty);
				}
			}

			const scene_changes = (dirty & /*isRounded, isScrollable, isScrollableW, $$restProps*/ 1248)
			? get_spread_update(scene_spread_levels, [
					scene_spread_levels[0],
					dirty & /*isRounded*/ 32 && {
						borderRadius: /*isRounded*/ ctx[5]
						? "0 0 var(--roundness) var(--roundness)"
						: 0
					},
					dirty & /*isScrollable*/ 64 && { isScrollable: /*isScrollable*/ ctx[6] },
					dirty & /*isScrollableW*/ 128 && { isScrollableW: /*isScrollableW*/ ctx[7] },
					dirty & /*$$restProps*/ 1024 && get_spread_object(/*$$restProps*/ ctx[10])
				])
			: {};

			if (dirty & /*$$scope*/ 32768) {
				scene_changes.$$scope = { dirty, ctx };
			}

			if (!updating_height && dirty & /*sceneHeight*/ 512) {
				updating_height = true;
				scene_changes.height = /*sceneHeight*/ ctx[9];
				add_flush_callback(() => updating_height = false);
			}

			scene.$set(scene_changes);

			if (!current || dirty & /*height*/ 8) {
				set_style(component, "--height", CSSUtility.parse(/*height*/ ctx[3]));
			}

			if (!current || dirty & /*width*/ 16) {
				set_style(component, "--width", CSSUtility.parse(/*width*/ ctx[4]));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(appBar_slot_or_fallback, local);
			transition_in(scene.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(appBar_slot_or_fallback, local);
			transition_out(scene.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(component);
			if (appBar_slot_or_fallback) appBar_slot_or_fallback.d(detaching);
			destroy_component(scene);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let sceneHeight;

	const omit_props_names = [
		"appBarComponent","title","appBarProps","height","width","isRounded","isScrollable","isScrollableW","expandedHeightW"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);

	let $isScrollableW,
		$$unsubscribe_isScrollableW = noop,
		$$subscribe_isScrollableW = () => ($$unsubscribe_isScrollableW(), $$unsubscribe_isScrollableW = subscribe(isScrollableW, $$value => $$invalidate(11, $isScrollableW = $$value)), isScrollableW);

	let $expandedHeightW,
		$$unsubscribe_expandedHeightW = noop,
		$$subscribe_expandedHeightW = () => ($$unsubscribe_expandedHeightW(), $$unsubscribe_expandedHeightW = subscribe(expandedHeightW, $$value => $$invalidate(12, $expandedHeightW = $$value)), expandedHeightW);

	$$self.$$.on_destroy.push(() => $$unsubscribe_isScrollableW());
	$$self.$$.on_destroy.push(() => $$unsubscribe_expandedHeightW());
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("AppBarFragment", slots, ['appBar','default']);
	
	
	let { appBarComponent = AppBar } = $$props;
	let { title = undefined } = $$props;
	let { appBarProps = {} } = $$props;
	let { height = "auto" } = $$props;
	let { width = "auto" } = $$props;
	let { isRounded = false } = $$props;
	let { isScrollable = false } = $$props;
	let { isScrollableW = writable(isScrollable) } = $$props;
	validate_store(isScrollableW, "isScrollableW");
	$$subscribe_isScrollableW();
	let { expandedHeightW = writable(0) } = $$props;
	validate_store(expandedHeightW, "expandedHeightW");
	$$subscribe_expandedHeightW();

	function scene_height_binding(value) {
		sceneHeight = value;
		((($$invalidate(9, sceneHeight), $$invalidate(11, $isScrollableW)), $$invalidate(3, height)), $$invalidate(12, $expandedHeightW));
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("appBarComponent" in $$new_props) $$invalidate(0, appBarComponent = $$new_props.appBarComponent);
		if ("title" in $$new_props) $$invalidate(1, title = $$new_props.title);
		if ("appBarProps" in $$new_props) $$invalidate(2, appBarProps = $$new_props.appBarProps);
		if ("height" in $$new_props) $$invalidate(3, height = $$new_props.height);
		if ("width" in $$new_props) $$invalidate(4, width = $$new_props.width);
		if ("isRounded" in $$new_props) $$invalidate(5, isRounded = $$new_props.isRounded);
		if ("isScrollable" in $$new_props) $$invalidate(6, isScrollable = $$new_props.isScrollable);
		if ("isScrollableW" in $$new_props) $$subscribe_isScrollableW($$invalidate(7, isScrollableW = $$new_props.isScrollableW));
		if ("expandedHeightW" in $$new_props) $$subscribe_expandedHeightW($$invalidate(8, expandedHeightW = $$new_props.expandedHeightW));
		if ("$$scope" in $$new_props) $$invalidate(15, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		writable,
		AppBar,
		Scene: Fragment,
		CSSUtility,
		appBarComponent,
		title,
		appBarProps,
		height,
		width,
		isRounded,
		isScrollable,
		isScrollableW,
		expandedHeightW,
		sceneHeight,
		$isScrollableW,
		$expandedHeightW
	});

	$$self.$inject_state = $$new_props => {
		if ("appBarComponent" in $$props) $$invalidate(0, appBarComponent = $$new_props.appBarComponent);
		if ("title" in $$props) $$invalidate(1, title = $$new_props.title);
		if ("appBarProps" in $$props) $$invalidate(2, appBarProps = $$new_props.appBarProps);
		if ("height" in $$props) $$invalidate(3, height = $$new_props.height);
		if ("width" in $$props) $$invalidate(4, width = $$new_props.width);
		if ("isRounded" in $$props) $$invalidate(5, isRounded = $$new_props.isRounded);
		if ("isScrollable" in $$props) $$invalidate(6, isScrollable = $$new_props.isScrollable);
		if ("isScrollableW" in $$props) $$subscribe_isScrollableW($$invalidate(7, isScrollableW = $$new_props.isScrollableW));
		if ("expandedHeightW" in $$props) $$subscribe_expandedHeightW($$invalidate(8, expandedHeightW = $$new_props.expandedHeightW));
		if ("sceneHeight" in $$props) $$invalidate(9, sceneHeight = $$new_props.sceneHeight);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$isScrollableW, height, $expandedHeightW*/ 6152) {
			$: $$invalidate(9, sceneHeight = $isScrollableW
			? `calc(${CSSUtility.parse(height)} - ${$expandedHeightW}px)`
			: "auto");
		}
	};

	return [
		appBarComponent,
		title,
		appBarProps,
		height,
		width,
		isRounded,
		isScrollable,
		isScrollableW,
		expandedHeightW,
		sceneHeight,
		$$restProps,
		$isScrollableW,
		$expandedHeightW,
		slots,
		scene_height_binding,
		$$scope
	];
}

class AppBarFragment extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
			appBarComponent: 0,
			title: 1,
			appBarProps: 2,
			height: 3,
			width: 4,
			isRounded: 5,
			isScrollable: 6,
			isScrollableW: 7,
			expandedHeightW: 8
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "AppBarFragment",
			options,
			id: create_fragment$4.name
		});
	}

	get appBarComponent() {
		return this.$$.ctx[0];
	}

	set appBarComponent(appBarComponent) {
		this.$set({ appBarComponent });
		flush();
	}

	get title() {
		return this.$$.ctx[1];
	}

	set title(title) {
		this.$set({ title });
		flush();
	}

	get appBarProps() {
		return this.$$.ctx[2];
	}

	set appBarProps(appBarProps) {
		this.$set({ appBarProps });
		flush();
	}

	get height() {
		return this.$$.ctx[3];
	}

	set height(height) {
		this.$set({ height });
		flush();
	}

	get width() {
		return this.$$.ctx[4];
	}

	set width(width) {
		this.$set({ width });
		flush();
	}

	get isRounded() {
		return this.$$.ctx[5];
	}

	set isRounded(isRounded) {
		this.$set({ isRounded });
		flush();
	}

	get isScrollable() {
		return this.$$.ctx[6];
	}

	set isScrollable(isScrollable) {
		this.$set({ isScrollable });
		flush();
	}

	get isScrollableW() {
		return this.$$.ctx[7];
	}

	set isScrollableW(isScrollableW) {
		this.$set({ isScrollableW });
		flush();
	}

	get expandedHeightW() {
		return this.$$.ctx[8];
	}

	set expandedHeightW(expandedHeightW) {
		this.$set({ expandedHeightW });
		flush();
	}
}

/* src\ui\blocks\appBars\ClosableAppBar.svelte generated by Svelte v3.38.2 */
const file$3 = "src\\ui\\blocks\\appBars\\ClosableAppBar.svelte";

// (15:0) <AppBar   bind:expandedHeightW   bind:baseHeightW   bind:isSpacedW   bind:isSpaced   {...$$restProps}  >
function create_default_slot$2(ctx) {
	let button;
	let current;

	button = new Button({
			props: {
				icon: "clear",
				backgroundColour: "transparent",
				hoverColour: "#fff2"
			},
			$$inline: true
		});

	button.$on("click", function () {
		if (is_function(/*onBlur*/ ctx[4])) /*onBlur*/ ctx[4].apply(this, arguments);
	});

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(15:0) <AppBar   bind:expandedHeightW   bind:baseHeightW   bind:isSpacedW   bind:isSpaced   {...$$restProps}  >",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let appbar;
	let updating_expandedHeightW;
	let updating_baseHeightW;
	let updating_isSpacedW;
	let updating_isSpaced;
	let current;
	const appbar_spread_levels = [/*$$restProps*/ ctx[5]];

	function appbar_expandedHeightW_binding(value) {
		/*appbar_expandedHeightW_binding*/ ctx[7](value);
	}

	function appbar_baseHeightW_binding(value) {
		/*appbar_baseHeightW_binding*/ ctx[8](value);
	}

	function appbar_isSpacedW_binding(value) {
		/*appbar_isSpacedW_binding*/ ctx[9](value);
	}

	function appbar_isSpaced_binding(value) {
		/*appbar_isSpaced_binding*/ ctx[10](value);
	}

	let appbar_props = {
		$$slots: { default: [create_default_slot$2] },
		$$scope: { ctx }
	};

	for (let i = 0; i < appbar_spread_levels.length; i += 1) {
		appbar_props = assign(appbar_props, appbar_spread_levels[i]);
	}

	if (/*expandedHeightW*/ ctx[0] !== void 0) {
		appbar_props.expandedHeightW = /*expandedHeightW*/ ctx[0];
	}

	if (/*baseHeightW*/ ctx[1] !== void 0) {
		appbar_props.baseHeightW = /*baseHeightW*/ ctx[1];
	}

	if (/*isSpacedW*/ ctx[3] !== void 0) {
		appbar_props.isSpacedW = /*isSpacedW*/ ctx[3];
	}

	if (/*isSpaced*/ ctx[2] !== void 0) {
		appbar_props.isSpaced = /*isSpaced*/ ctx[2];
	}

	appbar = new AppBar({ props: appbar_props, $$inline: true });
	binding_callbacks.push(() => bind(appbar, "expandedHeightW", appbar_expandedHeightW_binding));
	binding_callbacks.push(() => bind(appbar, "baseHeightW", appbar_baseHeightW_binding));
	binding_callbacks.push(() => bind(appbar, "isSpacedW", appbar_isSpacedW_binding));
	binding_callbacks.push(() => bind(appbar, "isSpaced", appbar_isSpaced_binding));

	const block = {
		c: function create() {
			create_component(appbar.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(appbar, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const appbar_changes = (dirty & /*$$restProps*/ 32)
			? get_spread_update(appbar_spread_levels, [get_spread_object(/*$$restProps*/ ctx[5])])
			: {};

			if (dirty & /*$$scope, onBlur*/ 2064) {
				appbar_changes.$$scope = { dirty, ctx };
			}

			if (!updating_expandedHeightW && dirty & /*expandedHeightW*/ 1) {
				updating_expandedHeightW = true;
				appbar_changes.expandedHeightW = /*expandedHeightW*/ ctx[0];
				add_flush_callback(() => updating_expandedHeightW = false);
			}

			if (!updating_baseHeightW && dirty & /*baseHeightW*/ 2) {
				updating_baseHeightW = true;
				appbar_changes.baseHeightW = /*baseHeightW*/ ctx[1];
				add_flush_callback(() => updating_baseHeightW = false);
			}

			if (!updating_isSpacedW && dirty & /*isSpacedW*/ 8) {
				updating_isSpacedW = true;
				appbar_changes.isSpacedW = /*isSpacedW*/ ctx[3];
				add_flush_callback(() => updating_isSpacedW = false);
			}

			if (!updating_isSpaced && dirty & /*isSpaced*/ 4) {
				updating_isSpaced = true;
				appbar_changes.isSpaced = /*isSpaced*/ ctx[2];
				add_flush_callback(() => updating_isSpaced = false);
			}

			appbar.$set(appbar_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(appbar.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(appbar.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(appbar, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	const omit_props_names = ["expandedHeightW","baseHeightW","isSpaced","isSpacedW","isActiveW","onBlur"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("ClosableAppBar", slots, []);
	let { expandedHeightW = writable(0) } = $$props;
	let { baseHeightW = writable(0) } = $$props;
	let { isSpaced = true } = $$props;
	let { isSpacedW = writable(isSpaced) } = $$props;
	let { isActiveW = writable(false) } = $$props;

	let { onBlur = () => {
		isActiveW.set(false);
	} } = $$props;

	function appbar_expandedHeightW_binding(value) {
		expandedHeightW = value;
		$$invalidate(0, expandedHeightW);
	}

	function appbar_baseHeightW_binding(value) {
		baseHeightW = value;
		$$invalidate(1, baseHeightW);
	}

	function appbar_isSpacedW_binding(value) {
		isSpacedW = value;
		$$invalidate(3, isSpacedW);
	}

	function appbar_isSpaced_binding(value) {
		isSpaced = value;
		$$invalidate(2, isSpaced);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("expandedHeightW" in $$new_props) $$invalidate(0, expandedHeightW = $$new_props.expandedHeightW);
		if ("baseHeightW" in $$new_props) $$invalidate(1, baseHeightW = $$new_props.baseHeightW);
		if ("isSpaced" in $$new_props) $$invalidate(2, isSpaced = $$new_props.isSpaced);
		if ("isSpacedW" in $$new_props) $$invalidate(3, isSpacedW = $$new_props.isSpacedW);
		if ("isActiveW" in $$new_props) $$invalidate(6, isActiveW = $$new_props.isActiveW);
		if ("onBlur" in $$new_props) $$invalidate(4, onBlur = $$new_props.onBlur);
	};

	$$self.$capture_state = () => ({
		writable,
		AppBar,
		Button,
		expandedHeightW,
		baseHeightW,
		isSpaced,
		isSpacedW,
		isActiveW,
		onBlur
	});

	$$self.$inject_state = $$new_props => {
		if ("expandedHeightW" in $$props) $$invalidate(0, expandedHeightW = $$new_props.expandedHeightW);
		if ("baseHeightW" in $$props) $$invalidate(1, baseHeightW = $$new_props.baseHeightW);
		if ("isSpaced" in $$props) $$invalidate(2, isSpaced = $$new_props.isSpaced);
		if ("isSpacedW" in $$props) $$invalidate(3, isSpacedW = $$new_props.isSpacedW);
		if ("isActiveW" in $$props) $$invalidate(6, isActiveW = $$new_props.isActiveW);
		if ("onBlur" in $$props) $$invalidate(4, onBlur = $$new_props.onBlur);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		expandedHeightW,
		baseHeightW,
		isSpaced,
		isSpacedW,
		onBlur,
		$$restProps,
		isActiveW,
		appbar_expandedHeightW_binding,
		appbar_baseHeightW_binding,
		appbar_isSpacedW_binding,
		appbar_isSpaced_binding
	];
}

class ClosableAppBar extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			expandedHeightW: 0,
			baseHeightW: 1,
			isSpaced: 2,
			isSpacedW: 3,
			isActiveW: 6,
			onBlur: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ClosableAppBar",
			options,
			id: create_fragment$3.name
		});
	}

	get expandedHeightW() {
		return this.$$.ctx[0];
	}

	set expandedHeightW(expandedHeightW) {
		this.$set({ expandedHeightW });
		flush();
	}

	get baseHeightW() {
		return this.$$.ctx[1];
	}

	set baseHeightW(baseHeightW) {
		this.$set({ baseHeightW });
		flush();
	}

	get isSpaced() {
		return this.$$.ctx[2];
	}

	set isSpaced(isSpaced) {
		this.$set({ isSpaced });
		flush();
	}

	get isSpacedW() {
		return this.$$.ctx[3];
	}

	set isSpacedW(isSpacedW) {
		this.$set({ isSpacedW });
		flush();
	}

	get isActiveW() {
		return this.$$.ctx[6];
	}

	set isActiveW(isActiveW) {
		this.$set({ isActiveW });
		flush();
	}

	get onBlur() {
		return this.$$.ctx[4];
	}

	set onBlur(onBlur) {
		this.$set({ onBlur });
		flush();
	}
}

var undefined$2 = undefined;

/* src\ui\components\ExpandingButton.svelte generated by Svelte v3.38.2 */

const { console: console_1 } = globals;
const file$2 = "src\\ui\\components\\ExpandingButton.svelte";

function create_fragment$2(ctx) {
	let component_1;
	let container0;
	let t0;
	let container1;
	let t1;
	let button;
	let current;
	let mounted;
	let dispose;

	button = new Button({
			props: {
				icon: "clear",
				backgroundColour: /*buttonColour*/ ctx[2],
				hoverColour: /*hoverColour*/ ctx[3],
				padding: 20
			},
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[13]);

	const block = {
		c: function create() {
			component_1 = element("component");
			container0 = element("container");
			t0 = space();
			container1 = element("container");
			t1 = space();
			create_component(button.$$.fragment);
			attr_dev(container0, "class", "outer touch svelte-1xttfpk");
			set_style(container0, "--outer-transform", "scale(" + /*$scaleW*/ ctx[4] + ")");
			set_style(container0, "--outer-filter", "blur(" + (/*$scaleW*/ ctx[4] - 1) + "px)");
			set_style(container0, "--outer-opacity", 30 - /*$scaleW*/ ctx[4] / 30);
			add_location(container0, file$2, 81, 1, 2638);
			attr_dev(container1, "class", "outer blinker svelte-1xttfpk");
			toggle_class(container1, "paused", !/*isBlinkerEnabled*/ ctx[0]);
			add_location(container1, file$2, 90, 1, 2844);
			set_style(component_1, "--colour-background", CSSUtility.parse(/*backgroundColour*/ ctx[1]));
			attr_dev(component_1, "class", "svelte-1xttfpk");
			add_location(component_1, file$2, 72, 0, 2437);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, component_1, anchor);
			append_dev(component_1, container0);
			/*container0_binding*/ ctx[12](container0);
			append_dev(component_1, t0);
			append_dev(component_1, container1);
			append_dev(component_1, t1);
			mount_component(button, component_1, null);
			/*component_1_binding*/ ctx[14](component_1);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(window, "mousemove", /*onMouseMove*/ ctx[11], false, false, false),
					listen_dev(window, "touchmove", /*onMouseMove*/ ctx[11], false, false, false),
					listen_dev(window, "mouseup", /*onMouseUp*/ ctx[10], false, false, false),
					listen_dev(component_1, "touchstart", /*onMouseDown*/ ctx[9], { passive: true }, false, false),
					listen_dev(component_1, "mousedown", /*onMouseDown*/ ctx[9], false, false, false),
					listen_dev(component_1, "touchend", /*onMouseUp*/ ctx[10], { passive: true }, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*$scaleW*/ 16) {
				set_style(container0, "--outer-transform", "scale(" + /*$scaleW*/ ctx[4] + ")");
			}

			if (!current || dirty & /*$scaleW*/ 16) {
				set_style(container0, "--outer-filter", "blur(" + (/*$scaleW*/ ctx[4] - 1) + "px)");
			}

			if (!current || dirty & /*$scaleW*/ 16) {
				set_style(container0, "--outer-opacity", 30 - /*$scaleW*/ ctx[4] / 30);
			}

			if (dirty & /*isBlinkerEnabled*/ 1) {
				toggle_class(container1, "paused", !/*isBlinkerEnabled*/ ctx[0]);
			}

			const button_changes = {};
			if (dirty & /*buttonColour*/ 4) button_changes.backgroundColour = /*buttonColour*/ ctx[2];
			if (dirty & /*hoverColour*/ 8) button_changes.hoverColour = /*hoverColour*/ ctx[3];
			button.$set(button_changes);

			if (!current || dirty & /*backgroundColour*/ 2) {
				set_style(component_1, "--colour-background", CSSUtility.parse(/*backgroundColour*/ ctx[1]));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(component_1);
			/*container0_binding*/ ctx[12](null);
			destroy_component(button);
			/*component_1_binding*/ ctx[14](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let $scaleW;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("ExpandingButton", slots, []);
	const dispatch = createEventDispatcher();
	let { backgroundColour = "--colour-ok-secondary" } = $$props;
	let { buttonColour = "--colour-ok-primary" } = $$props;
	let { hoverColour = "--colour-ok-secondary" } = $$props;
	let { isBlinkerEnabled = true } = $$props;
	let component;
	let outer;
	let isHolding = false;
	let animation = null;
	const scaleW = writable(1);
	validate_store(scaleW, "scaleW");
	component_subscribe($$self, scaleW, value => $$invalidate(4, $scaleW = value));

	function onMouseDown() {
		console.log("down");
		isHolding = true;

		animation === null || animation === void 0
		? void 0
		: animation.cancel();

		animation = null;
	}

	function onMouseUp() {
		console.log("up");

		if (!isHolding) {
			return;
		}

		isHolding = false;

		animation = outer.animate([{ transform: `scale(${$scaleW})` }, { transform: "scale(1)" }], {
			duration: 500,
			easing: CSSUtility.getVariable("--ease-fast-slow")
		});

		animation.addEventListener("finish", () => {
			set_store_value(scaleW, $scaleW = 1, $scaleW);
			animation = null;
		});
	}

	function onMouseMove(event) {
		var _a, _b, _c, _d, _e, _f;
		console.log("move");

		if (!isHolding) {
			return;
		}

		const x1 = (_c = (_b = (_a = event.touches) === null || _a === void 0
		? void 0
		: _a[0]) === null || _b === void 0
		? void 0
		: _b.pageX) !== null && _c !== void 0
		? _c
		: event.clientX;

		const y1 = (_f = (_e = (_d = event.touches) === null || _d === void 0
		? void 0
		: _d[0]) === null || _e === void 0
		? void 0
		: _e.pageY) !== null && _f !== void 0
		? _f
		: event.clientY;

		const { left, top, height, width } = component.getBoundingClientRect();
		const x2 = left + width / 2;
		const y2 = top + height / 2;
		const distance = Math.hypot(x2 - x1, y2 - y1);
		const distanceNormalized = distance / Math.hypot(WindowUtility.viewport.height, WindowUtility.viewport.width);
		set_store_value(scaleW, $scaleW = distanceNormalized * (Math.max(WindowUtility.viewport.width, WindowUtility.viewport.height) / 100) * 3 + 1, $scaleW);
	}

	const writable_props = ["backgroundColour", "buttonColour", "hoverColour", "isBlinkerEnabled"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<ExpandingButton> was created with unknown prop '${key}'`);
	});

	function container0_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			outer = $$value;
			$$invalidate(6, outer);
		});
	}

	const click_handler = () => dispatch("click");

	function component_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			component = $$value;
			$$invalidate(5, component);
		});
	}

	$$self.$$set = $$props => {
		if ("backgroundColour" in $$props) $$invalidate(1, backgroundColour = $$props.backgroundColour);
		if ("buttonColour" in $$props) $$invalidate(2, buttonColour = $$props.buttonColour);
		if ("hoverColour" in $$props) $$invalidate(3, hoverColour = $$props.hoverColour);
		if ("isBlinkerEnabled" in $$props) $$invalidate(0, isBlinkerEnabled = $$props.isBlinkerEnabled);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		writable,
		CSSUtility,
		WindowUtility,
		Button,
		dispatch,
		backgroundColour,
		buttonColour,
		hoverColour,
		isBlinkerEnabled,
		component,
		outer,
		isHolding,
		animation,
		scaleW,
		onMouseDown,
		onMouseUp,
		onMouseMove,
		$scaleW
	});

	$$self.$inject_state = $$props => {
		if ("backgroundColour" in $$props) $$invalidate(1, backgroundColour = $$props.backgroundColour);
		if ("buttonColour" in $$props) $$invalidate(2, buttonColour = $$props.buttonColour);
		if ("hoverColour" in $$props) $$invalidate(3, hoverColour = $$props.hoverColour);
		if ("isBlinkerEnabled" in $$props) $$invalidate(0, isBlinkerEnabled = $$props.isBlinkerEnabled);
		if ("component" in $$props) $$invalidate(5, component = $$props.component);
		if ("outer" in $$props) $$invalidate(6, outer = $$props.outer);
		if ("isHolding" in $$props) isHolding = $$props.isHolding;
		if ("animation" in $$props) animation = $$props.animation;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$scaleW*/ 16) {
			$: $scaleW === 1
			? $$invalidate(0, isBlinkerEnabled = true)
			: $$invalidate(0, isBlinkerEnabled = false);
		}
	};

	return [
		isBlinkerEnabled,
		backgroundColour,
		buttonColour,
		hoverColour,
		$scaleW,
		component,
		outer,
		dispatch,
		scaleW,
		onMouseDown,
		onMouseUp,
		onMouseMove,
		container0_binding,
		click_handler,
		component_1_binding
	];
}

class ExpandingButton extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			backgroundColour: 1,
			buttonColour: 2,
			hoverColour: 3,
			isBlinkerEnabled: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ExpandingButton",
			options,
			id: create_fragment$2.name
		});
	}

	get backgroundColour() {
		return this.$$.ctx[1];
	}

	set backgroundColour(backgroundColour) {
		this.$set({ backgroundColour });
		flush();
	}

	get buttonColour() {
		return this.$$.ctx[2];
	}

	set buttonColour(buttonColour) {
		this.$set({ buttonColour });
		flush();
	}

	get hoverColour() {
		return this.$$.ctx[3];
	}

	set hoverColour(hoverColour) {
		this.$set({ hoverColour });
		flush();
	}

	get isBlinkerEnabled() {
		return this.$$.ctx[0];
	}

	set isBlinkerEnabled(isBlinkerEnabled) {
		this.$set({ isBlinkerEnabled });
		flush();
	}
}

var undefined$1 = undefined;

/* src\ui\fragments\CallFragment.svelte generated by Svelte v3.38.2 */
const file$1 = "src\\ui\\fragments\\CallFragment.svelte";

// (61:4) <Button       icon='nat'      >
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("render it");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(61:4) <Button       icon='nat'      >",
		ctx
	});

	return block;
}

// (16:0) <AppBarFragment   isPadded={true}   isInAnimated={true}   isOutAnimated={true}   height='100vh'   width='100vw'   align='flex-end'   justify='center'   appBarComponent={null}  >
function create_default_slot$1(ctx) {
	let container0;
	let gradient2;
	let t0;
	let container4;
	let container3;
	let container1;
	let expandingbutton;
	let t1;
	let container2;
	let button;
	let current;
	gradient2 = new Gradient2({ $$inline: true });
	expandingbutton = new ExpandingButton({ $$inline: true });

	button = new Button({
			props: {
				icon: "nat",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			container0 = element("container");
			create_component(gradient2.$$.fragment);
			t0 = space();
			container4 = element("container");
			container3 = element("container");
			container1 = element("container");
			create_component(expandingbutton.$$.fragment);
			t1 = space();
			container2 = element("container");
			create_component(button.$$.fragment);
			attr_dev(container0, "class", "gradient svelte-1dpmmxc");
			add_location(container0, file$1, 34, 1, 1003);
			attr_dev(container1, "class", "customize");
			add_location(container1, file$1, 44, 3, 1145);
			attr_dev(container2, "class", "submit");
			add_location(container2, file$1, 57, 3, 1451);
			attr_dev(container3, "class", "buttons svelte-1dpmmxc");
			add_location(container3, file$1, 41, 2, 1105);
			attr_dev(container4, "class", "content svelte-1dpmmxc");
			add_location(container4, file$1, 38, 1, 1068);
		},
		m: function mount(target, anchor) {
			insert_dev(target, container0, anchor);
			mount_component(gradient2, container0, null);
			insert_dev(target, t0, anchor);
			insert_dev(target, container4, anchor);
			append_dev(container4, container3);
			append_dev(container3, container1);
			mount_component(expandingbutton, container1, null);
			append_dev(container3, t1);
			append_dev(container3, container2);
			mount_component(button, container2, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 1) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(gradient2.$$.fragment, local);
			transition_in(expandingbutton.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(gradient2.$$.fragment, local);
			transition_out(expandingbutton.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(container0);
			destroy_component(gradient2);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(container4);
			destroy_component(expandingbutton);
			destroy_component(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(16:0) <AppBarFragment   isPadded={true}   isInAnimated={true}   isOutAnimated={true}   height='100vh'   width='100vw'   align='flex-end'   justify='center'   appBarComponent={null}  >",
		ctx
	});

	return block;
}

// (26:1) 
function create_appBar_slot(ctx) {
	let container;
	let closableappbar;
	let current;

	closableappbar = new ClosableAppBar({
			props: { title: "", isSpaced: false },
			$$inline: true
		});

	const block = {
		c: function create() {
			container = element("container");
			create_component(closableappbar.$$.fragment);
			attr_dev(container, "slot", "appBar");
			add_location(container, file$1, 25, 1, 892);
		},
		m: function mount(target, anchor) {
			insert_dev(target, container, anchor);
			mount_component(closableappbar, container, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(closableappbar.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(closableappbar.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(container);
			destroy_component(closableappbar);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_appBar_slot.name,
		type: "slot",
		source: "(26:1) ",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let appbarfragment;
	let current;

	appbarfragment = new AppBarFragment({
			props: {
				isPadded: true,
				isInAnimated: true,
				isOutAnimated: true,
				height: "100vh",
				width: "100vw",
				align: "flex-end",
				justify: "center",
				appBarComponent: null,
				$$slots: {
					appBar: [create_appBar_slot],
					default: [create_default_slot$1]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(appbarfragment.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(appbarfragment, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const appbarfragment_changes = {};

			if (dirty & /*$$scope*/ 1) {
				appbarfragment_changes.$$scope = { dirty, ctx };
			}

			appbarfragment.$set(appbarfragment_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(appbarfragment.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(appbarfragment.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(appbarfragment, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("CallFragment", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CallFragment> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		onMount,
		writable,
		push,
		Ctx,
		Button,
		Input,
		Fragment,
		Dialog,
		Gradient2,
		ToastItem,
		Levels,
		AppBarFragment,
		ClosableAppBar,
		ExpandingButton
	});

	return [];
}

class CallFragment extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CallFragment",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src\ui\routes\CallRoute.svelte generated by Svelte v3.38.2 */
const file = "src\\ui\\routes\\CallRoute.svelte";

// (5:0) <Dialog   maxHeight='unset'  >
function create_default_slot(ctx) {
	let callfragment;
	let current;
	callfragment = new CallFragment({ $$inline: true });

	const block = {
		c: function create() {
			create_component(callfragment.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(callfragment, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(callfragment.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(callfragment.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(callfragment, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(5:0) <Dialog   maxHeight='unset'  >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let dialog;
	let current;

	dialog = new Dialog({
			props: {
				maxHeight: "unset",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(dialog.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(dialog, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const dialog_changes = {};

			if (dirty & /*$$scope*/ 1) {
				dialog_changes.$$scope = { dirty, ctx };
			}

			dialog.$set(dialog_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dialog.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dialog.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dialog, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("CallRoute", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CallRoute> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Dialog, CallFragment });
	return [];
}

class CallRoute extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CallRoute",
			options,
			id: create_fragment.name
		});
	}
}

export default CallRoute;
//# sourceMappingURL=CallRoute-d4d5ba70.js.map
